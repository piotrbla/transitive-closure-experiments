./NusValidation.c:16:5: warning: return statement must be final statement in function
    return s1;
    ^~~~~~~~~

#stencil scop start

#delta analyze start

#distance vectors set : { [i0 = 0, i1 = 2, i2 = -1, i3 = 1, i4 = 1]; [i0 = 0, i1 = 1, i2 = -1, i3 = 1, i4 = 1]; [i0 = 0, i1 = 2, i2 = -1, i3 = 1, i4 = 0]; [i0 = 0, i1 = 1, i2 = -1, i3 = 1, i4 = 0]; [i0 = 0, i1 = 2, i2 = -1, i3 = 1, i4 = -1]; [i0 = 0, i1 = 1, i2 = -1, i3 = 1, i4 = -1]; [i0 = 0, i1 = 2, i2 = 0, i3 = 0, i4 = -1]; [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = -1] }

#distance vectors set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = 1]; [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 1]; [i0 = 0, i1 = 1, i2 = 1, i3 = -1, i4 = 1]; [i0 = 0, i1 = 0, i2 = 1, i3 = -1, i4 = 1]; [i0 = 0, i1 = 1, i2 = -1, i3 = 1, i4 = 0]; [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = 0] }

#distance vectors set : { [i0 = 0, i1 = 1, i2 = 1, i3 = -1, i4 = 0]; [i0 = 0, i1 = 0, i2 = 1, i3 = -1, i4 = 0]; [i0 = 0, i1 = 1, i2 = 1, i3 = -1, i4 = -1]; [i0 = 0, i1 = 0, i2 = 1, i3 = -1, i4 = -1] }

#distance vectors set : { [i0 = 0, i1 = 1, i2 = -3, i3 = 0, i4 = 1]; [i0 = 0, i1 = 1, i2 = -2, i3 = 0, i4 = 0]; [i0 = 0, i1 = 2, i2 = -3, i3 = 0, i4 = 0]; [i0 = 0, i1 = 1, i2 = -3, i3 = 0, i4 = 0] }

#distance vectors set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 4, i4 = 0]; [i0 = 0, i1 = 3, i2 = 0, i3 = 4, i4 = -1]; [i0 = 0, i1 = 2, i2 = 0, i3 = 4, i4 = -1]; [i0 = 0, i1 = 2, i2 = 0, i3 = 3, i4 = -1] }

#distance vectors set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 2, i4 = 1]; [i0 = 0, i1 = 1, i2 = 0, i3 = 2, i4 = 1]; [i0 = 0, i1 = 2, i2 = 0, i3 = 1, i4 = 1]; [i0 = 0, i1 = 1, i2 = 0, i3 = 1, i4 = 1]; [i0 = 0, i1 = 2, i2 = 0, i3 = 2, i4 = 0]; [i0 = 0, i1 = 1, i2 = 0, i3 = 2, i4 = 0]; [i0 = 0, i1 = 2, i2 = 0, i3 = 1, i4 = 0]; [i0 = 0, i1 = 1, i2 = 0, i3 = 1, i4 = 0] }

#distance vectors set : { [i0 = 0, i1 = 2, i2 = -1, i3 = 0, i4 = 0]; [i0 = 0, i1 = 1, i2 = -1, i3 = 0, i4 = 0]; [i0 = 0, i1 = 2, i2 = -2, i3 = 0, i4 = 0]; [i0 = 0, i1 = 1, i2 = -2, i3 = 0, i4 = 0]; [i0 = 0, i1 = 2, i2 = -1, i3 = 0, i4 = -1]; [i0 = 0, i1 = 1, i2 = -1, i3 = 0, i4 = -1]; [i0 = 0, i1 = 2, i2 = -2, i3 = 0, i4 = -1]; [i0 = 0, i1 = 1, i2 = -2, i3 = 0, i4 = -1] }

#selected distance vector: { [i0 = 0, i1 = 2, i2 = 0, i3 = 2, i4 = 1] }

#selected distance vector: { [i0 = 0, i1 = 1, i2 = 0, i3 = 2, i4 = 1] }

#selected distance vector: { [i0 = 0, i1 = 2, i2 = 0, i3 = 1, i4 = 1] }

#selected distance vector: { [i0 = 0, i1 = 1, i2 = 0, i3 = 1, i4 = 1] }

#selected distance vector: { [i0 = 0, i1 = 2, i2 = -1, i3 = 1, i4 = 1] }

#selected distance vector: { [i0 = 0, i1 = 1, i2 = -1, i3 = 1, i4 = 1] }

#selected distance vector: { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = 1] }

#selected distance vector: { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 1] }

#selected distance vector: { [i0 = 0, i1 = 1, i2 = -3, i3 = 0, i4 = 1] }

#selected distance vector: { [i0 = 0, i1 = 1, i2 = 1, i3 = -1, i4 = 1] }

#selected distance vector: { [i0 = 0, i1 = 0, i2 = 1, i3 = -1, i4 = 1] }

#selected distance vector: { [i0 = 0, i1 = 2, i2 = 0, i3 = 4, i4 = 0] }

#selected distance vector: { [i0 = 0, i1 = 2, i2 = 0, i3 = 2, i4 = 0] }

#selected distance vector: { [i0 = 0, i1 = 1, i2 = 0, i3 = 2, i4 = 0] }

#selected distance vector: { [i0 = 0, i1 = 2, i2 = 0, i3 = 1, i4 = 0] }

#selected distance vector: { [i0 = 0, i1 = 1, i2 = 0, i3 = 1, i4 = 0] }

#selected distance vector: { [i0 = 0, i1 = 2, i2 = -1, i3 = 1, i4 = 0] }

#selected distance vector: { [i0 = 0, i1 = 1, i2 = -1, i3 = 1, i4 = 0] }

#selected distance vector: { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = 0] }

#selected distance vector: { [i0 = 0, i1 = 1, i2 = -2, i3 = 0, i4 = 0] }

#selected distance vector: { [i0 = 0, i1 = 2, i2 = -3, i3 = 0, i4 = 0] }

#selected distance vector: { [i0 = 0, i1 = 1, i2 = -3, i3 = 0, i4 = 0] }

#selected distance vector: { [i0 = 0, i1 = 1, i2 = 1, i3 = -1, i4 = 0] }

#selected distance vector: { [i0 = 0, i1 = 0, i2 = 1, i3 = -1, i4 = 0] }

#selected distance vector: { [i0 = 0, i1 = 3, i2 = 0, i3 = 4, i4 = -1] }

#selected distance vector: { [i0 = 0, i1 = 2, i2 = 0, i3 = 4, i4 = -1] }

#selected distance vector: { [i0 = 0, i1 = 2, i2 = 0, i3 = 3, i4 = -1] }

#selected distance vector: { [i0 = 0, i1 = 2, i2 = -1, i3 = 1, i4 = -1] }

#selected distance vector: { [i0 = 0, i1 = 1, i2 = -1, i3 = 1, i4 = -1] }

#selected distance vector: { [i0 = 0, i1 = 2, i2 = 0, i3 = 0, i4 = -1] }

#selected distance vector: { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = -1] }

#selected distance vector: { [i0 = 0, i1 = 1, i2 = 1, i3 = -1, i4 = -1] }

#selected distance vector: { [i0 = 0, i1 = 0, i2 = 1, i3 = -1, i4 = -1] }

#selected distance vector: { [i0 = 0, i1 = 2, i2 = -1, i3 = 0, i4 = 0] }

#selected distance vector: { [i0 = 0, i1 = 1, i2 = -1, i3 = 0, i4 = 0] }

#selected distance vector: { [i0 = 0, i1 = 2, i2 = -2, i3 = 0, i4 = 0] }

#selected distance vector: { [i0 = 0, i1 = 2, i2 = -1, i3 = 0, i4 = -1] }

#selected distance vector: { [i0 = 0, i1 = 1, i2 = -1, i3 = 0, i4 = -1] }

#selected distance vector: { [i0 = 0, i1 = 2, i2 = -2, i3 = 0, i4 = -1] }

#selected distance vector: { [i0 = 0, i1 = 1, i2 = -2, i3 = 0, i4 = -1] }

#analyze loop dimensions:

#[i0]:  is not parameter, is order dim

#[i1]:  positive: { [i0 = 0, i1 = 2, i2 = 0, i3 = 2, i4 = 1] }  is parameter

#[i2]:  positive: { [i0 = 0, i1 = 1, i2 = 1, i3 = -1, i4 = 1] }  negative: { [i0 = 0, i1 = 2, i2 = -1, i3 = 1, i4 = 1] }  is parameter

#[i3]:  positive: { [i0 = 0, i1 = 2, i2 = 0, i3 = 2, i4 = 1] }  negative: { [i0 = 0, i1 = 1, i2 = 1, i3 = -1, i4 = 1] }  is parameter

#[i4]:  positive: { [i0 = 0, i1 = 2, i2 = 0, i3 = 2, i4 = 1] }  negative: { [i0 = 0, i1 = 3, i2 = 0, i3 = 4, i4 = -1] }  is not parameter, is order dim

#delta analyze end

#create space start

#hyperplane_for_dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5] : a2 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 and c0 = c1 + c2 + c3 + c4 + c5 and a2 >= 0  and a3 <= 0  and a4 >= 0  and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 1*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 2*a4 + 1*a5 >= 0 and 0*a1 + 2*a2 + 0*a3 + 1*a4 + 1*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 1*a5 >= 0 and 0*a1 + 2*a2 + -1*a3 + 1*a4 + 1*a5 >= 0 and 0*a1 + 1*a2 + -1*a3 + 1*a4 + 1*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 and 0*a1 + 1*a2 + -3*a3 + 0*a4 + 1*a5 >= 0 and 0*a1 + 1*a2 + 1*a3 + -1*a4 + 1*a5 >= 0 and 0*a1 + 0*a2 + 1*a3 + -1*a4 + 1*a5 >= 0 and 0*a1 + 2*a2 + 0*a3 + 4*a4 + 0*a5 >= 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 2*a4 + 0*a5 >= 0 and 0*a1 + 2*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 0*a1 + 2*a2 + -1*a3 + 1*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + -1*a3 + 1*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + -2*a3 + 0*a4 + 0*a5 >= 0 and 0*a1 + 2*a2 + -3*a3 + 0*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + -3*a3 + 0*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + 1*a3 + -1*a4 + 0*a5 >= 0 and 0*a1 + 0*a2 + 1*a3 + -1*a4 + 0*a5 >= 0 and 0*a1 + 3*a2 + 0*a3 + 4*a4 + -1*a5 >= 0 and 0*a1 + 2*a2 + 0*a3 + 4*a4 + -1*a5 >= 0 and 0*a1 + 2*a2 + 0*a3 + 3*a4 + -1*a5 >= 0 and 0*a1 + 2*a2 + -1*a3 + 1*a4 + -1*a5 >= 0 and 0*a1 + 1*a2 + -1*a3 + 1*a4 + -1*a5 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -1*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -1*a5 >= 0 and 0*a1 + 1*a2 + 1*a3 + -1*a4 + -1*a5 >= 0 and 0*a1 + 0*a2 + 1*a3 + -1*a4 + -1*a5 >= 0 and 0*a1 + 2*a2 + -1*a3 + 0*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 + 0*a5 >= 0 and 0*a1 + 2*a2 + -2*a3 + 0*a4 + 0*a5 >= 0 and 0*a1 + 2*a2 + -1*a3 + 0*a4 + -1*a5 >= 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 + -1*a5 >= 0 and 0*a1 + 2*a2 + -2*a3 + 0*a4 + -1*a5 >= 0 and 0*a1 + 1*a2 + -2*a3 + 0*a4 + -1*a5 >= 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -5, a1 = 0, a2 = 1, a3 = 0, a4 = 0, a5 = 0] }

#hyperplane check: first hyperplane 

#result: true

#hyperplane_for_dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5] : a3 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 and c0 = c1 + c2 + c3 + c4 + c5 and a2 >= 0  and a3 <= 0  and a4 >= 0  and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 1*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 2*a4 + 1*a5 >= 0 and 0*a1 + 2*a2 + 0*a3 + 1*a4 + 1*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 1*a5 >= 0 and 0*a1 + 2*a2 + -1*a3 + 1*a4 + 1*a5 >= 0 and 0*a1 + 1*a2 + -1*a3 + 1*a4 + 1*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 and 0*a1 + 1*a2 + -3*a3 + 0*a4 + 1*a5 >= 0 and 0*a1 + 1*a2 + 1*a3 + -1*a4 + 1*a5 >= 0 and 0*a1 + 0*a2 + 1*a3 + -1*a4 + 1*a5 >= 0 and 0*a1 + 2*a2 + 0*a3 + 4*a4 + 0*a5 >= 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 2*a4 + 0*a5 >= 0 and 0*a1 + 2*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 0*a1 + 2*a2 + -1*a3 + 1*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + -1*a3 + 1*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + -2*a3 + 0*a4 + 0*a5 >= 0 and 0*a1 + 2*a2 + -3*a3 + 0*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + -3*a3 + 0*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + 1*a3 + -1*a4 + 0*a5 >= 0 and 0*a1 + 0*a2 + 1*a3 + -1*a4 + 0*a5 >= 0 and 0*a1 + 3*a2 + 0*a3 + 4*a4 + -1*a5 >= 0 and 0*a1 + 2*a2 + 0*a3 + 4*a4 + -1*a5 >= 0 and 0*a1 + 2*a2 + 0*a3 + 3*a4 + -1*a5 >= 0 and 0*a1 + 2*a2 + -1*a3 + 1*a4 + -1*a5 >= 0 and 0*a1 + 1*a2 + -1*a3 + 1*a4 + -1*a5 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -1*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -1*a5 >= 0 and 0*a1 + 1*a2 + 1*a3 + -1*a4 + -1*a5 >= 0 and 0*a1 + 0*a2 + 1*a3 + -1*a4 + -1*a5 >= 0 and 0*a1 + 2*a2 + -1*a3 + 0*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 + 0*a5 >= 0 and 0*a1 + 2*a2 + -2*a3 + 0*a4 + 0*a5 >= 0 and 0*a1 + 2*a2 + -1*a3 + 0*a4 + -1*a5 >= 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 + -1*a5 >= 0 and 0*a1 + 2*a2 + -2*a3 + 0*a4 + -1*a5 >= 0 and 0*a1 + 1*a2 + -2*a3 + 0*a4 + -1*a5 >= 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4, a5] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane_for_dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5] : a4 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 and c0 = c1 + c2 + c3 + c4 + c5 and a2 >= 0  and a3 <= 0  and a4 >= 0  and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 1*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 2*a4 + 1*a5 >= 0 and 0*a1 + 2*a2 + 0*a3 + 1*a4 + 1*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 1*a5 >= 0 and 0*a1 + 2*a2 + -1*a3 + 1*a4 + 1*a5 >= 0 and 0*a1 + 1*a2 + -1*a3 + 1*a4 + 1*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 >= 0 and 0*a1 + 1*a2 + -3*a3 + 0*a4 + 1*a5 >= 0 and 0*a1 + 1*a2 + 1*a3 + -1*a4 + 1*a5 >= 0 and 0*a1 + 0*a2 + 1*a3 + -1*a4 + 1*a5 >= 0 and 0*a1 + 2*a2 + 0*a3 + 4*a4 + 0*a5 >= 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 2*a4 + 0*a5 >= 0 and 0*a1 + 2*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 >= 0 and 0*a1 + 2*a2 + -1*a3 + 1*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + -1*a3 + 1*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + -2*a3 + 0*a4 + 0*a5 >= 0 and 0*a1 + 2*a2 + -3*a3 + 0*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + -3*a3 + 0*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + 1*a3 + -1*a4 + 0*a5 >= 0 and 0*a1 + 0*a2 + 1*a3 + -1*a4 + 0*a5 >= 0 and 0*a1 + 3*a2 + 0*a3 + 4*a4 + -1*a5 >= 0 and 0*a1 + 2*a2 + 0*a3 + 4*a4 + -1*a5 >= 0 and 0*a1 + 2*a2 + 0*a3 + 3*a4 + -1*a5 >= 0 and 0*a1 + 2*a2 + -1*a3 + 1*a4 + -1*a5 >= 0 and 0*a1 + 1*a2 + -1*a3 + 1*a4 + -1*a5 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -1*a5 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -1*a5 >= 0 and 0*a1 + 1*a2 + 1*a3 + -1*a4 + -1*a5 >= 0 and 0*a1 + 0*a2 + 1*a3 + -1*a4 + -1*a5 >= 0 and 0*a1 + 2*a2 + -1*a3 + 0*a4 + 0*a5 >= 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 + 0*a5 >= 0 and 0*a1 + 2*a2 + -2*a3 + 0*a4 + 0*a5 >= 0 and 0*a1 + 2*a2 + -1*a3 + 0*a4 + -1*a5 >= 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 + -1*a5 >= 0 and 0*a1 + 2*a2 + -2*a3 + 0*a4 + -1*a5 >= 0 and 0*a1 + 1*a2 + -2*a3 + 0*a4 + -1*a5 >= 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4, a5] : false }

#hyperplane check: hyperplane is empty 

#result: false

#created hyperplane : { [d0 = 0, b0 = 1, c0 = -5, a1 = 0, a2 = 1, a3 = 0, a4 = 0, a5 = 0] }

# [n, Id1] -> { [i0, i1, i2, i3, i4] : exists bId1 : 0 * i0 + 1 * i1 + 0 * i2 + 0 * i3 + 0 * i4 + bId1 = 0 and 8 * Id1 <= bId1 <= 8 * (Id1 + 1) - 1 } 

#tiles for domain set  : [n] -> { S_1[i0 = 0, i1, i2, i3, i4 = 1] : i1 <= -2 + n and i2 >= 0 and i1 + i2 <= i3 < 2i1 + i2 and i3 < n }

# [n, Id1] -> { S_1[i0, i1, i2, i3, i4] : -7 - 8Id1 <= i1 <= -8Id1 } * [n] -> { S_1[i0 = 0, i1, i2, i3, i4 = 1] : i1 <= -2 + n and i2 >= 0 and i1 + i2 <= i3 < 2i1 + i2 and i3 < n }

#result  : [n, Id1] -> { S_1[i0 = 0, i1, i2, i3, i4 = 1] : -7 - 8Id1 <= i1 <= -8Id1 and i1 <= -2 + n and i2 >= 0 and i1 + i2 <= i3 < 2i1 + i2 and i3 < n }

#tiles for domain set  : [n] -> { S_2[i0 = 1, i1 = 0, i2 = 0, i3 = 0, i4 = 0] }

# [n, Id1] -> { S_2[i0, i1, i2, i3, i4] : -7 - 8Id1 <= i1 <= -8Id1 } * [n] -> { S_2[i0 = 1, i1 = 0, i2 = 0, i3 = 0, i4 = 0] }

#result  : [n, Id1] -> { S_2[i0 = 1, i1 = 0, i2 = 0, i3 = 0, i4 = 0] : Id1 = 0 }

#tiles for domain set  : [n] -> { S_0[i0 = 0, i1, i2, i3, i4 = 0] : i1 <= -2 + n and i2 >= 0 and i1 + i2 <= i3 <= -2 + 2i1 + i2 and i3 < n }

# [n, Id1] -> { S_0[i0, i1, i2, i3, i4] : -7 - 8Id1 <= i1 <= -8Id1 } * [n] -> { S_0[i0 = 0, i1, i2, i3, i4 = 0] : i1 <= -2 + n and i2 >= 0 and i1 + i2 <= i3 <= -2 + 2i1 + i2 and i3 < n }

#result  : [n, Id1] -> { S_0[i0 = 0, i1, i2, i3, i4 = 0] : -7 - 8Id1 <= i1 <= -8Id1 and i1 <= -2 + n and i2 >= 0 and i1 + i2 <= i3 <= -2 + 2i1 + i2 and i3 < n }

#created spaces:

#[space1]: hyperplane: i0 * ( 0 ) + i1 * ( 1 ) + i2 * ( 0 ) + i3 * ( 0 ) + i4 * ( 0 ) + b = 0

#create space end

#create tile relations start

#tlieOrder: [n, Id1', Id1] -> { S_1[i0 = 0, i1, i2, i3, i4 = 1] : -7 - 8Id1 <= i1 <= -8Id1 and i1 <= -2 + n and i2 >= 0 and i1 + i2 <= i3 < 2i1 + i2 and i3 < n and not (Id1=Id1' ); S_2[i0 = 1, i1 = 0, i2 = 0, i3 = 0, i4 = 0] : Id1 = 0 and not (Id1=Id1' ); S_0[i0 = 0, i1, i2, i3, i4 = 0] : -7 - 8Id1 <= i1 <= -8Id1 and i1 <= -2 + n and i2 >= 0 and i1 + i2 <= i3 <= -2 + 2i1 + i2 and i3 < n  and not (Id1=Id1' )}

#rlation: [n] -> { S_1[i0 = 0, i1, i2, i3, i4 = 1] -> S_1[i0' = 0, i1', i2' = i2 - i1', i3' = i3, i4' = 1] : i1 + i2 <= i3 < 2i1 + i2 and i3 < n and -i2 + i3 < i1' <= i2 }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_1[i0 = 0, i1, i2, i3, i4 = 1] -> S_1[i0' = 0, i1', i2' = i2 - i1', i3' = i3, i4' = 1] : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i1 <= -2 + n and i2 >= 0 and i3 >= i1 + i2 and i2 <= i3 < 2i1 + i2 and i3 < n and i1' > -i2 + i3 and -7 - 8Id1' <= i1' <= -8Id1' and i1' <= i2 and i1' <= -2 + n }

#tile relation: [n] -> { S_1[Id1] -> S_1[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3',i4,i4' : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i1 + i2 <= i3 < 2i1 + i2 and i3 < n and i1' > -i2 + i3 and -7 - 8Id1' <= i1' <= -8Id1' and i1' <= i2 and i1' <= -2 + n }

#rlation: [n] -> { S_1[i0 = 0, i1, i2, i3, i4 = 1] -> S_1[i0' = 0, i1', i2' = 1 + i2, i3' = -1 + i3, i4' = 1] : i2 >= 0 and i3 < 2i1 + i2 and i3 < n and i1 <= i1' <= -2 - i2 + i3 }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_1[i0 = 0, i1, i2, i3, i4 = 1] -> S_1[i0' = 0, i1', i2' = 1 + i2, i3' = -1 + i3, i4' = 1] : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i1 <= -2 + n and i2 >= 0 and i1 + i2 <= i3 < 2i1 + i2 and i3 < n and i1' >= i1 and -7 - 8Id1' <= i1' <= -8Id1' and i1' <= -2 - i2 + i3 and i1' <= -2 + n and 2i1' >= -1 - i2 + i3 }

#tile relation: [n] -> { S_1[Id1] -> S_1[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3',i4,i4' : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i2 >= 0 and i3 < 2i1 + i2 and i3 < n and -7 - 8Id1' <= i1' <= -8Id1' and i1' <= -2 - i2 + i3 and 2i1' >= -1 - i2 + i3 }

#rlation: [n] -> { S_1[i0 = 0, i1, i2, i3, i4 = 1] -> S_1[i0' = 0, i1', i2' = i2, i3' = i3, i4' = 1] : i2 >= 0 and i3 < 2i1 + i2 and i3 < n and i1 < i1' <= -i2 + i3 and i1' <= -2 + n }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_1[i0 = 0, i1, i2, i3, i4 = 1] -> S_1[i0' = 0, i1', i2' = i2, i3' = i3, i4' = 1] : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i1 <= -2 + n and i2 >= 0 and i1 + i2 <= i3 < 2i1 + i2 and i3 < n and i1' > i1 and -7 - 8Id1' <= i1' <= -8Id1' and i1' <= -i2 + i3 and i1' <= -2 + n and 2i1' > -i2 + i3 }

#tile relation: [n] -> { S_1[Id1] -> S_1[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3',i4,i4' : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i2 >= 0 and i3 < 2i1 + i2 and i3 < n and -7 - 8Id1' <= i1' <= -8Id1' and i1' <= -i2 + i3 and i1' <= -2 + n and 2i1' > -i2 + i3 }

#rlation: [n] -> { S_1[i0 = 0, i1, i2, i3, i4 = 1] -> S_1[i0' = 0, i1', i2' = -1 + i2, i3' = 1 + i3, i4' = 1] : i2 > 0 and i1 + i2 <= i3 < 2i1 + i2 and i3 <= -2 + n and i1 < i1' <= 2 - i2 + i3 and i1' <= -2 + n }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_1[i0 = 0, i1, i2, i3, i4 = 1] -> S_1[i0' = 0, i1', i2' = -1 + i2, i3' = 1 + i3, i4' = 1] : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i1 <= -2 + n and i2 > 0 and i1 + i2 <= i3 < 2i1 + i2 and i3 <= -2 + n and i1' > i1 and -7 - 8Id1' <= i1' <= -8Id1' and i1' <= 2 - i2 + i3 and i1' <= -2 + n and 2i1' >= 3 - i2 + i3 }

#tile relation: [n] -> { S_1[Id1] -> S_1[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3',i4,i4' : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i2 > 0 and i1 + i2 <= i3 < 2i1 + i2 and i3 <= -2 + n and -7 - 8Id1' <= i1' <= -8Id1' and i1' <= 2 - i2 + i3 and i1' <= -2 + n and 2i1' >= 3 - i2 + i3 }

#rlation: [n] -> { S_1[i0 = 0, i1, i2, i3, i4 = 1] -> S_1[i0' = 0, i1' = 1 - i2 + i3, i2' = i2, i3', i4' = 1] : i2 >= 0 and i1 + i2 <= i3 < 2i1 + i2 and i3 <= -3 + n + i2 and i3 < i3' <= 1 - i2 + 2i3 and i3' < n }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_1[i0 = 0, i1, i2, i3, i4 = 1] -> S_1[i0' = 0, i1' = 1 - i2 + i3, i2' = i2, i3', i4' = 1] : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i1 <= -2 + n and i2 >= 0 and i3 >= i1 + i2 and -8 - 8Id1' + i2 <= i3 < -8Id1' + i2 and i3 < 2i1 + i2 and i3 < n and i3 <= -3 + n + i2 and i3 < i3' <= 1 - i2 + 2i3 and i3' < n }

#tile relation: [n] -> { S_1[Id1] -> S_1[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3',i4,i4' : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i2 >= 0 and -8 - 8Id1' + i2 <= i3 < -8Id1' + i2 and i3 < 2i1 + i2 and i3 < n and i3 <= -3 + n + i2 and i3 < i3' <= 1 - i2 + 2i3 and i3' < n }

#rlation: [n] -> { S_1[i0 = 0, i1, i2, i3, i4 = 1] -> S_0[i0' = 0, i1', i2', i3' = i2 + i3 - i2', i4' = 0] : i1 + i2 <= i3 < 2i1 + i2 and i1 < i1' <= -2 + n and i2' >= -1 + i2 and i2' >= 3 + i3 - 2i1' and i2' >= 0 and -n + i2 + i3 < i2' <= i2 and 2i2' <= i2 + i3 - i1' }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_1[i0 = 0, i1, i2, i3, i4 = 1] -> S_0[i0' = 0, i1', i2', i3' = i2 + i3 - i2', i4' = 0] : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i1 <= -2 + n and i2 >= 0 and i1 + i2 <= i3 < 2i1 + i2 and i3 < n and i1' > i1 and -7 - 8Id1' <= i1' <= -8Id1' and i1' <= -2 + n and i2' >= -1 + i2 and i2' >= 3 + i3 - 2i1' and i2' >= 0 and -n + i2 + i3 < i2' <= i2 and 2 + i2 + i3 - 2i1' <= 2i2' <= i2 + i3 - i1' }

#tile relation: [n] -> { S_1[Id1] -> S_0[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3',i4,i4' : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i1 + i2 <= i3 < 2i1 + i2 and -7 - 8Id1' <= i1' <= -8Id1' and i1' <= -2 + n and i2' >= -1 + i2 and i2' >= 3 + i3 - 2i1' and i2' >= 0 and -n + i2 + i3 < i2' <= i2 and 2 + i2 + i3 - 2i1' <= 2i2' <= i2 + i3 - i1' }

#rlation: [n] -> { S_1[i0 = 0, i1, i2, i3, i4 = 1] -> S_0[i0' = 0, i1', i2' = i2, i3' = i3 + i1', i4' = 0] : i2 >= 0 and i1 + i2 <= i3 < 2i1 + i2 and 2 - i2 + i3 <= i1' < n - i3 }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_1[i0 = 0, i1, i2, i3, i4 = 1] -> S_0[i0' = 0, i1', i2' = i2, i3' = i3 + i1', i4' = 0] : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i1 <= -2 + n and i2 >= 0 and i3 >= i1 + i2 and i2 <= i3 < 2i1 + i2 and i3 < n and i1' >= 2 - i2 + i3 and -7 - 8Id1' <= i1' <= -8Id1' and i1' < n - i3 and i1' <= -2 + n }

#tile relation: [n] -> { S_1[Id1] -> S_0[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3',i4,i4' : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i2 >= 0 and i1 + i2 <= i3 < 2i1 + i2 and i1' >= 2 - i2 + i3 and -7 - 8Id1' <= i1' <= -8Id1' and i1' < n - i3 and i1' <= -2 + n }

#rlation: [n] -> { S_1[i0 = 0, i1, i2, i3, i4 = 1] -> S_0[i0' = 0, i1', i2' = 1 + i2, i3' = -1 + i3, i4' = 0] : i2 >= 0 and i3 < 2i1 + i2 and i3 < n and i1 <= i1' <= -2 - i2 + i3 }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_1[i0 = 0, i1, i2, i3, i4 = 1] -> S_0[i0' = 0, i1', i2' = 1 + i2, i3' = -1 + i3, i4' = 0] : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i1 <= -2 + n and i2 >= 0 and i1 + i2 <= i3 < 2i1 + i2 and i3 < n and i1' >= i1 and -7 - 8Id1' <= i1' <= -8Id1' and i1' <= -2 - i2 + i3 and i1' <= -2 + n and 2i1' >= -i2 + i3 }

#tile relation: [n] -> { S_1[Id1] -> S_0[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3',i4,i4' : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i2 >= 0 and i3 < 2i1 + i2 and i3 < n and -7 - 8Id1' <= i1' <= -8Id1' and i1' <= -2 - i2 + i3 and 2i1' >= -i2 + i3 }

#rlation: [n] -> { S_1[i0 = 0, i1, i2, i3, i4 = 1] -> S_0[i0' = 0, i1' = 1 - i2 + i3, i2', i3' = i3, i4' = 0] : i1 + i2 <= i3 < 2i1 + i2 and i3 < n and i3 <= -3 + n + i2 and i2' >= 2i2 - i3 and 0 <= i2' < i2 }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_1[i0 = 0, i1, i2, i3, i4 = 1] -> S_0[i0' = 0, i1' = 1 - i2 + i3, i2', i3' = i3, i4' = 0] : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i1 <= -2 + n and i2 >= 0 and i3 >= i1 + i2 and -8 - 8Id1' + i2 <= i3 < -8Id1' + i2 and i3 < 2i1 + i2 and i3 < n and i3 <= -3 + n + i2 and i2' >= 2i2 - i3 and 0 <= i2' < i2 }

#tile relation: [n] -> { S_1[Id1] -> S_0[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3',i4,i4' : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i2 >= 0 and -8 - 8Id1' + i2 <= i3 < -8Id1' + i2 and i3 < 2i1 + i2 and i3 < n and i3 <= -3 + n + i2 and i2' >= 2i2 - i3 and 0 <= i2' < i2 }

#rlation: [n] -> { S_0[i0 = 0, i1, i2, i3, i4 = 0] -> S_1[i0' = 0, i1', i2' = i2 - i1', i3' = i3, i4' = 1] : i1 + i2 <= i3 <= -2 + 2i1 + i2 and i3 < n and -i2 + i3 < i1' <= i2 }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_0[i0 = 0, i1, i2, i3, i4 = 0] -> S_1[i0' = 0, i1', i2' = i2 - i1', i3' = i3, i4' = 1] : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i1 <= -2 + n and i2 >= 0 and i3 >= i1 + i2 and i2 <= i3 <= -2 + 2i1 + i2 and i3 < n and i1' > -i2 + i3 and -7 - 8Id1' <= i1' <= -8Id1' and i1' <= i2 and i1' <= -2 + n }

#tile relation: [n] -> { S_0[Id1] -> S_1[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3',i4,i4' : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i1 + i2 <= i3 <= -2 + 2i1 + i2 and i3 < n and i1' > -i2 + i3 and -7 - 8Id1' <= i1' <= -8Id1' and i1' <= i2 and i1' <= -2 + n }

#rlation: [n] -> { S_0[i0 = 0, i1, i2, i3, i4 = 0] -> S_1[i0' = 0, i1', i2' = 1 + i2, i3' = -1 + i3, i4' = 1] : i2 >= 0 and i3 <= -2 + 2i1 + i2 and i3 < n and i1 <= i1' <= -2 - i2 + i3 }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_0[i0 = 0, i1, i2, i3, i4 = 0] -> S_1[i0' = 0, i1', i2' = 1 + i2, i3' = -1 + i3, i4' = 1] : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i1 <= -2 + n and i2 >= 0 and i1 + i2 <= i3 <= -2 + 2i1 + i2 and i3 < n and i1' >= i1 and -7 - 8Id1' <= i1' <= -8Id1' and i1' <= -2 - i2 + i3 and i1' <= -2 + n and 2i1' >= -1 - i2 + i3 }

#tile relation: [n] -> { S_0[Id1] -> S_1[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3',i4,i4' : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i2 >= 0 and i3 <= -2 + 2i1 + i2 and i3 < n and -7 - 8Id1' <= i1' <= -8Id1' and i1' <= -2 - i2 + i3 and 2i1' >= -1 - i2 + i3 }

#rlation: [n] -> { S_0[i0 = 0, i1, i2, i3, i4 = 0] -> S_1[i0' = 0, i1', i2' = i2, i3' = i3, i4' = 1] : i2 >= 0 and i3 <= -2 + 2i1 + i2 and i3 < n and i1 <= i1' <= -i2 + i3 and i1' <= -2 + n }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_0[i0 = 0, i1, i2, i3, i4 = 0] -> S_1[i0' = 0, i1', i2' = i2, i3' = i3, i4' = 1] : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i1 <= -2 + n and i2 >= 0 and i1 + i2 <= i3 <= -2 + 2i1 + i2 and i3 < n and i1' >= i1 and -7 - 8Id1' <= i1' <= -8Id1' and i1' <= -i2 + i3 and i1' <= -2 + n and 2i1' > -i2 + i3 }

#tile relation: [n] -> { S_0[Id1] -> S_1[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3',i4,i4' : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i2 >= 0 and i3 <= -2 + 2i1 + i2 and i3 < n and -7 - 8Id1' <= i1' <= -8Id1' and i1' <= -i2 + i3 and i1' <= -2 + n and 2i1' > -i2 + i3 }

#rlation: [n] -> { S_0[i0 = 0, i1, i2, i3, i4 = 0] -> S_1[i0' = 0, i1', i2' = -1 + i2, i3' = 1 + i3, i4' = 1] : i2 > 0 and i1 + i2 <= i3 <= -2 + 2i1 + i2 and i3 <= -2 + n and i1 < i1' <= 2 - i2 + i3 and i1' <= -2 + n }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_0[i0 = 0, i1, i2, i3, i4 = 0] -> S_1[i0' = 0, i1', i2' = -1 + i2, i3' = 1 + i3, i4' = 1] : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i1 <= -2 + n and i2 > 0 and i1 + i2 <= i3 <= -2 + 2i1 + i2 and i3 <= -2 + n and i1' > i1 and -7 - 8Id1' <= i1' <= -8Id1' and i1' <= 2 - i2 + i3 and i1' <= -2 + n and 2i1' >= 3 - i2 + i3 }

#tile relation: [n] -> { S_0[Id1] -> S_1[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3',i4,i4' : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i2 > 0 and i1 + i2 <= i3 <= -2 + 2i1 + i2 and i3 <= -2 + n and -7 - 8Id1' <= i1' <= -8Id1' and i1' <= 2 - i2 + i3 and i1' <= -2 + n and 2i1' >= 3 - i2 + i3 }

#rlation: [n] -> { S_0[i0 = 0, i1, i2, i3, i4 = 0] -> S_1[i0' = 0, i1' = 1 - i2 + i3, i2' = i2, i3', i4' = 1] : i2 >= 0 and i1 + i2 <= i3 <= -2 + 2i1 + i2 and i3 <= -3 + n + i2 and i3 < i3' <= 1 - i2 + 2i3 and i3' < n }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_0[i0 = 0, i1, i2, i3, i4 = 0] -> S_1[i0' = 0, i1' = 1 - i2 + i3, i2' = i2, i3', i4' = 1] : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i1 <= -2 + n and i2 >= 0 and i3 >= i1 + i2 and -8 - 8Id1' + i2 <= i3 < -8Id1' + i2 and i3 <= -2 + 2i1 + i2 and i3 < n and i3 <= -3 + n + i2 and i3 < i3' <= 1 - i2 + 2i3 and i3' < n }

#tile relation: [n] -> { S_0[Id1] -> S_1[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3',i4,i4' : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i2 >= 0 and -8 - 8Id1' + i2 <= i3 < -8Id1' + i2 and i3 <= -2 + 2i1 + i2 and i3 < n and i3 <= -3 + n + i2 and i3 < i3' <= 1 - i2 + 2i3 and i3' < n }

#rlation: [n] -> { S_0[i0 = 0, i1, i2, i3, i4 = 0] -> S_0[i0' = 0, i1', i2' = i2, i3' = i3 + i1', i4' = 0] : i2 >= 0 and i1 + i2 <= i3 <= -2 + 2i1 + i2 and 2 - i2 + i3 <= i1' < n - i3 }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_0[i0 = 0, i1, i2, i3, i4 = 0] -> S_0[i0' = 0, i1', i2' = i2, i3' = i3 + i1', i4' = 0] : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i1 <= -2 + n and i2 >= 0 and i3 >= i1 + i2 and i2 <= i3 <= -2 + 2i1 + i2 and i3 < n and i1' >= 2 - i2 + i3 and -7 - 8Id1' <= i1' <= -8Id1' and i1' < n - i3 and i1' <= -2 + n }

#tile relation: [n] -> { S_0[Id1] -> S_0[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3',i4,i4' : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i2 >= 0 and i1 + i2 <= i3 <= -2 + 2i1 + i2 and i1' >= 2 - i2 + i3 and -7 - 8Id1' <= i1' <= -8Id1' and i1' < n - i3 and i1' <= -2 + n }

#rlation: [n] -> { S_0[i0 = 0, i1, i2, i3, i4 = 0] -> S_0[i0' = 0, i1', i2' = 1 + i2, i3' = -1 + i3, i4' = 0] : i2 >= 0 and i3 <= -2 + 2i1 + i2 and i3 < n and i1 <= i1' <= -2 - i2 + i3 }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_0[i0 = 0, i1, i2, i3, i4 = 0] -> S_0[i0' = 0, i1', i2' = 1 + i2, i3' = -1 + i3, i4' = 0] : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i1 <= -2 + n and i2 >= 0 and i1 + i2 <= i3 <= -2 + 2i1 + i2 and i3 < n and i1' >= i1 and -7 - 8Id1' <= i1' <= -8Id1' and i1' <= -2 - i2 + i3 and i1' <= -2 + n and 2i1' >= -i2 + i3 }

#tile relation: [n] -> { S_0[Id1] -> S_0[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3',i4,i4' : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i2 >= 0 and i3 <= -2 + 2i1 + i2 and i3 < n and -7 - 8Id1' <= i1' <= -8Id1' and i1' <= -2 - i2 + i3 and 2i1' >= -i2 + i3 }

#rlation: [n] -> { S_0[i0 = 0, i1, i2, i3, i4 = 0] -> S_0[i0' = 0, i1', i2' = i2, i3' = i3, i4' = 0] : i2 >= 0 and i3 <= -2 + 2i1 + i2 and i3 < n and i1 < i1' <= -i2 + i3 and i1' <= -2 + n }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_0[i0 = 0, i1, i2, i3, i4 = 0] -> S_0[i0' = 0, i1', i2' = i2, i3' = i3, i4' = 0] : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i1 <= -2 + n and i2 >= 0 and i1 + i2 <= i3 <= -2 + 2i1 + i2 and i3 < n and i1' > i1 and -7 - 8Id1' <= i1' <= -8Id1' and i1' <= -i2 + i3 and i1' <= -2 + n and 2i1' >= 2 - i2 + i3 }

#tile relation: [n] -> { S_0[Id1] -> S_0[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3',i4,i4' : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i2 >= 0 and i3 <= -2 + 2i1 + i2 and i3 < n and -7 - 8Id1' <= i1' <= -8Id1' and i1' <= -i2 + i3 and i1' <= -2 + n and 2i1' >= 2 - i2 + i3 }

#rlation: [n] -> { S_0[i0 = 0, i1, i2, i3, i4 = 0] -> S_0[i0' = 0, i1', i2' = -1 + i2, i3' = 1 + i3, i4' = 0] : i2 > 0 and i1 + i2 <= i3 <= -2 + 2i1 + i2 and i3 <= -2 + n and i1 < i1' <= 2 - i2 + i3 and i1' <= -2 + n }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_0[i0 = 0, i1, i2, i3, i4 = 0] -> S_0[i0' = 0, i1', i2' = -1 + i2, i3' = 1 + i3, i4' = 0] : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i1 <= -2 + n and i2 > 0 and i1 + i2 <= i3 <= -2 + 2i1 + i2 and i3 <= -2 + n and i1' > i1 and -7 - 8Id1' <= i1' <= -8Id1' and i1' <= 2 - i2 + i3 and i1' <= -2 + n and 2i1' >= 4 - i2 + i3 }

#tile relation: [n] -> { S_0[Id1] -> S_0[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3',i4,i4' : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i2 > 0 and i1 + i2 <= i3 <= -2 + 2i1 + i2 and i3 <= -2 + n and -7 - 8Id1' <= i1' <= -8Id1' and i1' <= 2 - i2 + i3 and i1' <= -2 + n and 2i1' >= 4 - i2 + i3 }

#rlation: [n] -> { S_0[i0 = 0, i1, i2, i3, i4 = 0] -> S_0[i0' = 0, i1' = 1 - i2 + i3, i2', i3' = i3, i4' = 0] : i1 + i2 <= i3 <= -2 + 2i1 + i2 and i3 < n and i3 <= -3 + n + i2 and i2' >= 2i2 - i3 and 0 <= i2' < i2 }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_0[i0 = 0, i1, i2, i3, i4 = 0] -> S_0[i0' = 0, i1' = 1 - i2 + i3, i2', i3' = i3, i4' = 0] : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i1 <= -2 + n and i2 >= 0 and i3 >= i1 + i2 and -8 - 8Id1' + i2 <= i3 < -8Id1' + i2 and i3 <= -2 + 2i1 + i2 and i3 < n and i3 <= -3 + n + i2 and i2' >= 2i2 - i3 and 0 <= i2' < i2 }

#tile relation: [n] -> { S_0[Id1] -> S_0[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3',i4,i4' : Id1' < Id1 and -7 - 8Id1 <= i1 <= -8Id1 and i2 >= 0 and -8 - 8Id1' + i2 <= i3 < -8Id1' + i2 and i3 <= -2 + 2i1 + i2 and i3 < n and i3 <= -3 + n + i2 and i2' >= 2i2 - i3 and 0 <= i2' < i2 }

#tile relations: [n] -> { S_0[Id1] -> S_0[Id1'] : Id1' < Id1 and 8Id1' >= -5 - n and (Id1' >= 2Id1 or (Id1 < 0 and 8Id1' >= -4 - n and 8Id1' >= -13 - n - 8Id1)); S_1[Id1] -> S_1[Id1'] : Id1 < 0 and Id1' < Id1 and (8Id1' >= -13 - n - 8Id1 or (Id1' >= -1 + 2Id1 and 8Id1' >= -5 - n)); S_0[Id1] -> S_1[Id1'] : Id1' < Id1 and 8Id1' >= -5 - n and (Id1' >= 2Id1 or (Id1 < 0 and 8Id1' >= -4 - n and 8Id1' >= -13 - n - 8Id1)); S_1[Id1] -> S_0[Id1'] : Id1 < 0 and Id1' < Id1 and (8Id1' >= -13 - n - 8Id1 or (Id1' >= -1 + 2Id1 and 8Id1' >= -5 - n)) }

#create tile relations end

#create stencil schedule start

#tile relatiions delta: { [Id1] : Id1 < 0 }

#tile relatiions distance vectors set: { [Id1 = -1]; [Id1 = -2] }

#tile relatiions distance vectors to scan: { [Id1 = -1]; [Id1 = -2] }

#wafefront hyperplane: lexmin( {[d0 = 0, b0, c0, a1] : exists c1 : ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and c0 = c1 and a1 != 0} * {[d0, b0, c0, a1] : exists b1 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and b0 > 0 and b0 = b1 and -1*a1 > 0 and -2*a1 > 0 } )

#result: { [d0 = 0, b0 = 1, c0 = 0, a1 = -1] }

#stencil schedule map: [n] -> { S_1[i0, i1, i2, i3, i4] -> [Wid1, Id1, 0, i1, i2, i3, 1] : Wid1 = -1 * Id1 + 0 and  -7 - 8Id1 <= i1 <= -8Id1  ; S_2[i0, i1, i2, i3, i4] -> [Wid1, Id1, 1, 0, 0, 0, 0] : Wid1 = -1 * Id1 + 0 and  -7 - 8Id1 <= i1 <= -8Id1  ; S_0[i0, i1, i2, i3, i4] -> [Wid1, Id1, 0, i1, i2, i3, 0]  : Wid1 = -1 * Id1 + 0 and  -7 - 8Id1 <= i1 <= -8Id1  } 
 
#create stencil schedule end

#create stencil schedule code start

#stencilScheduleMap: [n] -> { S_2[i0, i1, i2, i3, i4] -> [Wid1, Id1 = -Wid1, 1, 0, 0, 0, 0] : i1 <= 8Wid1 <= 7 + i1; S_1[i0, i1, i2, i3, i4] -> [Wid1, Id1 = -Wid1, 0, i1, i2, i3, 1] : i1 <= 8Wid1 <= 7 + i1; S_0[i0, i1, i2, i3, i4] -> [Wid1, Id1 = -Wid1, 0, i1, i2, i3, 0] : i1 <= 8Wid1 <= 7 + i1 }

#domain_union_set: [n] -> { S_1[i0 = 0, i1, i2, i3, i4 = 1] : i1 <= -2 + n and i2 >= 0 and i1 + i2 <= i3 < 2i1 + i2 and i3 < n; S_2[i0 = 1, i1 = 0, i2 = 0, i3 = 0, i4 = 0]; S_0[i0 = 0, i1, i2, i3, i4 = 0] : i1 <= -2 + n and i2 >= 0 and i1 + i2 <= i3 <= -2 + 2i1 + i2 and i3 < n }

#stencilGlobalSchedule: [n] -> { S_1[i0 = 0, i1, i2, i3, i4 = 1] -> [Wid1, Id1 = -Wid1, 0, i1, i2, i3, 1] : i1 <= -2 + n and i2 >= 0 and i1 + i2 <= i3 < 2i1 + i2 and i3 < n and i1 <= 8Wid1 <= 7 + i1; S_0[i0 = 0, i1, i2, i3, i4 = 0] -> [Wid1, Id1 = -Wid1, 0, i1, i2, i3, 0] : i1 <= -2 + n and i2 >= 0 and i1 + i2 <= i3 <= -2 + 2i1 + i2 and i3 < n and i1 <= 8Wid1 <= 7 + i1; S_2[i0 = 1, i1 = 0, i2 = 0, i3 = 0, i4 = 0] -> [Wid1 = 0, Id1 = 0, 1, 0, 0, 0, 0] }

#mapper_union_map: [n] -> { S_0[c0, c1, c2] -> S_0[i0 = 0, i1 = c0, i2 = c1, i3 = c2, i4 = 0]; S_2[] -> S_2[i0 = 1, i1 = 0, i2 = 0, i3 = 0, i4 = 0]; S_1[c0, c1, c2] -> S_1[i0 = 0, i1 = c0, i2 = c1, i3 = c2, i4 = 1] }

#stencilGlobalSchedule: [n] -> { S_2[] -> [Wid1 = 0, Id1 = 0, 1, 0, 0, 0, 0]; S_0[c0, c1, c2] -> [Wid1, Id1 = -Wid1, 0, c0, c1, c2, 0] : c0 <= -2 + n and c1 >= 0 and c0 + c1 <= c2 <= -2 + 2c0 + c1 and c2 < n and c0 <= 8Wid1 <= 7 + c0; S_1[c0, c1, c2] -> [Wid1, Id1 = -Wid1, 0, c0, c1, c2, 1] : c0 <= -2 + n and c1 >= 0 and c0 + c1 <= c2 < 2c0 + c1 and c2 < n and c0 <= 8Wid1 <= 7 + c0 }

#create stencil schedule code end

#wavefront card calculate start

#card set: [] -> { [Wid1] : exists n, Id1, i0, i1, i2, i3, i4 : n <= 1000 and n >= 0 and   Wid1 = -1 * Id1 + 0 and   i0 = 0 and i4 = 1 and -7 - 8Id1 <= i1 <= -8Id1 and i1 <= -2 + n and i2 >= 0 and i1 + i2 <= i3 < 2i1 + i2 and i3 < n  } 

#result: { [Wid1] : 0 < Wid1 <= 125 }

#card set: [] -> { [Wid1] : exists n, Id1, i0, i1, i2, i3, i4 : n <= 1000 and n >= 0 and   Wid1 = -1 * Id1 + 0 and   Id1 = 0 and i0 = 1 and i1 = 0 and i2 = 0 and i3 = 0 and i4 = 0  } 

#result: { [Wid1 = 0] }

#card set: [] -> { [Wid1] : exists n, Id1, i0, i1, i2, i3, i4 : n <= 1000 and n >= 0 and   Wid1 = -1 * Id1 + 0 and   i0 = 0 and i4 = 0 and -7 - 8Id1 <= i1 <= -8Id1 and i1 <= -2 + n and i2 >= 0 and i1 + i2 <= i3 <= -2 + 2i1 + i2 and i3 < n  } 

#result: { [Wid1] : 0 < Wid1 <= 125 }

#card union set: [n] -> { [Wid1] : exists Id1, i0, i1, i2, i3, i4 : Wid1 = -1 * Id1 + 0 and   i0 = 0 and i4 = 1 and -7 - 8Id1 <= i1 <= -8Id1 and i1 <= -2 + n and i2 >= 0 and i1 + i2 <= i3 < 2i1 + i2 and i3 < n  } 

#result: [n] -> { [Wid1] : Wid1 > 0 and 8Wid1 <= 5 + n }

#card union set: [n] -> { [Wid1] : exists Id1, i0, i1, i2, i3, i4 : Wid1 = -1 * Id1 + 0 and   Id1 = 0 and i0 = 1 and i1 = 0 and i2 = 0 and i3 = 0 and i4 = 0  } 

#result: [n] -> { [Wid1 = 0] }

#card union set: [n] -> { [Wid1] : exists Id1, i0, i1, i2, i3, i4 : Wid1 = -1 * Id1 + 0 and   i0 = 0 and i4 = 0 and -7 - 8Id1 <= i1 <= -8Id1 and i1 <= -2 + n and i2 >= 0 and i1 + i2 <= i3 <= -2 + 2i1 + i2 and i3 < n  } 

#result: [n] -> { [Wid1] : n >= 4 and Wid1 > 0 and 8Wid1 <= 5 + n }

#wavefront card set: { [Wid1] : 0 <= Wid1 <= 125 }

#wavefront card union set: [n] -> { [Wid1] : Wid1 > 0 and 8Wid1 <= 5 + n; [Wid1 = 0] }

#Wavefront card calculate end

#stencil scop end
