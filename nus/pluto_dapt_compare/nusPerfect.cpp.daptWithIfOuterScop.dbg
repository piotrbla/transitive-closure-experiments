./PerfectLoopsMP.c:32:13: warning: implicit declaration of function 'getFullCopy' is invalid in C99
  int** S = getFullCopy(table, n);
            ^
./PerfectLoopsMP.c:32:9: warning: incompatible integer to pointer conversion initializing 'int **' with an expression of type 'int'
  int** S = getFullCopy(table, n);
        ^   ~~~~~~~~~~~~~~~~~~~~~
./PerfectLoopsMP.c:34:18: warning: implicit declaration of function 'omp_get_wtime' is invalid in C99
  double start = omp_get_wtime();
                 ^
./PerfectLoopsMP.c:53:3: warning: implicitly declaring library function 'printf' with type 'int (const char *, ...)'
  printf("PERWIF: %lf\n", execution_time);
  ^
./PerfectLoopsMP.c:53:3: note: include the header <stdio.h> or explicitly provide a declaration for 'printf'
./PerfectLoopsMP.c:54:3: warning: implicit declaration of function 'write_results' is invalid in C99
  write_results(n, execution_time);
  ^
./PerfectLoopsMP.c:55:3: warning: implicit declaration of function 'printMatrix' is invalid in C99
  printMatrix(S, n, 2);
  ^
./PerfectLoopsMP.c:56:3: warning: implicit declaration of function 'deallocateMatrix' is invalid in C99
  deallocateMatrix(S, n);
  ^
./PerfectLoopsMP.c:16:5: warning: return statement must be final statement in function
    return s1;
    ^~~~~~~~~

#stencil scop start

#delta analyze start

#distance vectors set : { [i0 = 1, i1 = -1, i2 = 1, i3 = 1]; [i0 = 1, i1 = 0, i2 = 0, i3 = 1]; [i0 = 0, i1 = 0, i2 = 0, i3 = 1]; [i0 = 1, i1 = 0, i2 = 0, i3 = 0]; [i0 = 1, i1 = 1, i2 = -1, i3 = 0]; [i0 = 0, i1 = 1, i2 = -1, i3 = 0] }

#distance vectors set : { [i0 = 1, i1 = 1, i2 = -1, i3 = 1]; [i0 = 0, i1 = 1, i2 = -1, i3 = 1]; [i0 = 1, i1 = -1, i2 = 1, i3 = 0]; [i0 = 1, i1 = 0, i2 = 0, i3 = 0]; [i0 = 1, i1 = -1, i2 = 1, i3 = -1]; [i0 = 1, i1 = 0, i2 = 0, i3 = -1] }

#distance vectors set : { [i0 = 1, i1 = -3, i2 = 0, i3 = 1]; [i0 = 1, i1 = -2, i2 = 0, i3 = 0]; [i0 = 2, i1 = -3, i2 = 0, i3 = 0]; [i0 = 1, i1 = -3, i2 = 0, i3 = 0] }

#distance vectors set : { [i0 = 2, i1 = 0, i2 = 4, i3 = 0]; [i0 = 3, i1 = 0, i2 = 4, i3 = -1]; [i0 = 2, i1 = 0, i2 = 4, i3 = -1]; [i0 = 2, i1 = 0, i2 = 3, i3 = -1] }

#distance vectors set : { [i0 = 1, i1 = 1, i2 = -1, i3 = 0]; [i0 = 0, i1 = 1, i2 = -1, i3 = 0]; [i0 = 1, i1 = 1, i2 = -1, i3 = -1]; [i0 = 0, i1 = 1, i2 = -1, i3 = -1] }

#distance vectors set : { [i0 = 2, i1 = 0, i2 = 2, i3 = 1]; [i0 = 1, i1 = 0, i2 = 2, i3 = 1]; [i0 = 2, i1 = 0, i2 = 1, i3 = 1]; [i0 = 1, i1 = 0, i2 = 1, i3 = 1]; [i0 = 2, i1 = 0, i2 = 2, i3 = 0]; [i0 = 1, i1 = 0, i2 = 2, i3 = 0]; [i0 = 2, i1 = 0, i2 = 1, i3 = 0]; [i0 = 1, i1 = 0, i2 = 1, i3 = 0] }

#distance vectors set : { [i0 = 2, i1 = -1, i2 = 0, i3 = 0]; [i0 = 1, i1 = -1, i2 = 0, i3 = 0]; [i0 = 2, i1 = -2, i2 = 0, i3 = 0]; [i0 = 1, i1 = -2, i2 = 0, i3 = 0]; [i0 = 2, i1 = -1, i2 = 0, i3 = -1]; [i0 = 1, i1 = -1, i2 = 0, i3 = -1]; [i0 = 2, i1 = -2, i2 = 0, i3 = -1]; [i0 = 1, i1 = -2, i2 = 0, i3 = -1] }

#selected distance vector: { [i0 = 2, i1 = 0, i2 = 2, i3 = 1] }

#selected distance vector: { [i0 = 1, i1 = 0, i2 = 2, i3 = 1] }

#selected distance vector: { [i0 = 2, i1 = 0, i2 = 1, i3 = 1] }

#selected distance vector: { [i0 = 1, i1 = 0, i2 = 1, i3 = 1] }

#selected distance vector: { [i0 = 1, i1 = -1, i2 = 1, i3 = 1] }

#selected distance vector: { [i0 = 1, i1 = 0, i2 = 0, i3 = 1] }

#selected distance vector: { [i0 = 0, i1 = 0, i2 = 0, i3 = 1] }

#selected distance vector: { [i0 = 1, i1 = -3, i2 = 0, i3 = 1] }

#selected distance vector: { [i0 = 1, i1 = 1, i2 = -1, i3 = 1] }

#selected distance vector: { [i0 = 0, i1 = 1, i2 = -1, i3 = 1] }

#selected distance vector: { [i0 = 2, i1 = 0, i2 = 4, i3 = 0] }

#selected distance vector: { [i0 = 2, i1 = 0, i2 = 2, i3 = 0] }

#selected distance vector: { [i0 = 1, i1 = 0, i2 = 2, i3 = 0] }

#selected distance vector: { [i0 = 2, i1 = 0, i2 = 1, i3 = 0] }

#selected distance vector: { [i0 = 1, i1 = 0, i2 = 1, i3 = 0] }

#selected distance vector: { [i0 = 1, i1 = -1, i2 = 1, i3 = 0] }

#selected distance vector: { [i0 = 1, i1 = 0, i2 = 0, i3 = 0] }

#selected distance vector: { [i0 = 1, i1 = -2, i2 = 0, i3 = 0] }

#selected distance vector: { [i0 = 2, i1 = -3, i2 = 0, i3 = 0] }

#selected distance vector: { [i0 = 1, i1 = -3, i2 = 0, i3 = 0] }

#selected distance vector: { [i0 = 1, i1 = 1, i2 = -1, i3 = 0] }

#selected distance vector: { [i0 = 0, i1 = 1, i2 = -1, i3 = 0] }

#selected distance vector: { [i0 = 3, i1 = 0, i2 = 4, i3 = -1] }

#selected distance vector: { [i0 = 2, i1 = 0, i2 = 4, i3 = -1] }

#selected distance vector: { [i0 = 2, i1 = 0, i2 = 3, i3 = -1] }

#selected distance vector: { [i0 = 1, i1 = -1, i2 = 1, i3 = -1] }

#selected distance vector: { [i0 = 1, i1 = 0, i2 = 0, i3 = -1] }

#selected distance vector: { [i0 = 1, i1 = 1, i2 = -1, i3 = -1] }

#selected distance vector: { [i0 = 0, i1 = 1, i2 = -1, i3 = -1] }

#selected distance vector: { [i0 = 2, i1 = -1, i2 = 0, i3 = 0] }

#selected distance vector: { [i0 = 1, i1 = -1, i2 = 0, i3 = 0] }

#selected distance vector: { [i0 = 2, i1 = -2, i2 = 0, i3 = 0] }

#selected distance vector: { [i0 = 2, i1 = -1, i2 = 0, i3 = -1] }

#selected distance vector: { [i0 = 1, i1 = -1, i2 = 0, i3 = -1] }

#selected distance vector: { [i0 = 2, i1 = -2, i2 = 0, i3 = -1] }

#selected distance vector: { [i0 = 1, i1 = -2, i2 = 0, i3 = -1] }

#analyze loop dimensions:

#[i0]:  is parameter

#[i1]:  positive: { [i0 = 0, i1 = 1, i2 = -1, i3 = 1] }  negative: { [i0 = 1, i1 = -3, i2 = 0, i3 = 1] }  is parameter

#[i2]:  positive: { [i0 = 1, i1 = 0, i2 = 2, i3 = 1] }  negative: { [i0 = 0, i1 = 1, i2 = -1, i3 = 1] }  is parameter

#[i3]:  positive: { [i0 = 0, i1 = 0, i2 = 0, i3 = 1] }  negative: { [i0 = 0, i1 = 1, i2 = -1, i3 = -1] }  is not parameter, is order dim

#delta analyze end

#create space start

#hyperplane_for_dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4] : a1 != 0 } * {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a1 >= 0  and a2 <= 0  and a3 >= 0  and 2*a1 + 0*a2 + 2*a3 + 1*a4 >= 0 and 1*a1 + 0*a2 + 2*a3 + 1*a4 >= 0 and 2*a1 + 0*a2 + 1*a3 + 1*a4 >= 0 and 1*a1 + 0*a2 + 1*a3 + 1*a4 >= 0 and 1*a1 + -1*a2 + 1*a3 + 1*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + 1*a4 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 >= 0 and 1*a1 + -3*a2 + 0*a3 + 1*a4 >= 0 and 1*a1 + 1*a2 + -1*a3 + 1*a4 >= 0 and 0*a1 + 1*a2 + -1*a3 + 1*a4 >= 0 and 2*a1 + 0*a2 + 4*a3 + 0*a4 >= 0 and 2*a1 + 0*a2 + 2*a3 + 0*a4 >= 0 and 1*a1 + 0*a2 + 2*a3 + 0*a4 >= 0 and 2*a1 + 0*a2 + 1*a3 + 0*a4 >= 0 and 1*a1 + 0*a2 + 1*a3 + 0*a4 >= 0 and 1*a1 + -1*a2 + 1*a3 + 0*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + -2*a2 + 0*a3 + 0*a4 >= 0 and 2*a1 + -3*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + -3*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + 1*a2 + -1*a3 + 0*a4 >= 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 >= 0 and 3*a1 + 0*a2 + 4*a3 + -1*a4 >= 0 and 2*a1 + 0*a2 + 4*a3 + -1*a4 >= 0 and 2*a1 + 0*a2 + 3*a3 + -1*a4 >= 0 and 1*a1 + -1*a2 + 1*a3 + -1*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + -1*a4 >= 0 and 1*a1 + 1*a2 + -1*a3 + -1*a4 >= 0 and 0*a1 + 1*a2 + -1*a3 + -1*a4 >= 0 and 2*a1 + -1*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 >= 0 and 2*a1 + -2*a2 + 0*a3 + 0*a4 >= 0 and 2*a1 + -1*a2 + 0*a3 + -1*a4 >= 0 and 1*a1 + -1*a2 + 0*a3 + -1*a4 >= 0 and 2*a1 + -2*a2 + 0*a3 + -1*a4 >= 0 and 1*a1 + -2*a2 + 0*a3 + -1*a4 >= 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -4, a1 = 1, a2 = 0, a3 = 0, a4 = 0] }

#hyperplane check: first hyperplane 

#result: true

#hyperplane_for_dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4] : a2 != 0 } * {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a1 >= 0  and a2 <= 0  and a3 >= 0  and 2*a1 + 0*a2 + 2*a3 + 1*a4 >= 0 and 1*a1 + 0*a2 + 2*a3 + 1*a4 >= 0 and 2*a1 + 0*a2 + 1*a3 + 1*a4 >= 0 and 1*a1 + 0*a2 + 1*a3 + 1*a4 >= 0 and 1*a1 + -1*a2 + 1*a3 + 1*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + 1*a4 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 >= 0 and 1*a1 + -3*a2 + 0*a3 + 1*a4 >= 0 and 1*a1 + 1*a2 + -1*a3 + 1*a4 >= 0 and 0*a1 + 1*a2 + -1*a3 + 1*a4 >= 0 and 2*a1 + 0*a2 + 4*a3 + 0*a4 >= 0 and 2*a1 + 0*a2 + 2*a3 + 0*a4 >= 0 and 1*a1 + 0*a2 + 2*a3 + 0*a4 >= 0 and 2*a1 + 0*a2 + 1*a3 + 0*a4 >= 0 and 1*a1 + 0*a2 + 1*a3 + 0*a4 >= 0 and 1*a1 + -1*a2 + 1*a3 + 0*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + -2*a2 + 0*a3 + 0*a4 >= 0 and 2*a1 + -3*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + -3*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + 1*a2 + -1*a3 + 0*a4 >= 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 >= 0 and 3*a1 + 0*a2 + 4*a3 + -1*a4 >= 0 and 2*a1 + 0*a2 + 4*a3 + -1*a4 >= 0 and 2*a1 + 0*a2 + 3*a3 + -1*a4 >= 0 and 1*a1 + -1*a2 + 1*a3 + -1*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + -1*a4 >= 0 and 1*a1 + 1*a2 + -1*a3 + -1*a4 >= 0 and 0*a1 + 1*a2 + -1*a3 + -1*a4 >= 0 and 2*a1 + -1*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 >= 0 and 2*a1 + -2*a2 + 0*a3 + 0*a4 >= 0 and 2*a1 + -1*a2 + 0*a3 + -1*a4 >= 0 and 1*a1 + -1*a2 + 0*a3 + -1*a4 >= 0 and 2*a1 + -2*a2 + 0*a3 + -1*a4 >= 0 and 1*a1 + -2*a2 + 0*a3 + -1*a4 >= 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane_for_dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4] : a3 != 0 } * {[d0, b0, c0, a1, a2, a3, a4] : exists b1, c1, b2, c2, b3, c3, b4, c4 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 and c0 = c1 + c2 + c3 + c4 and a1 >= 0  and a2 <= 0  and a3 >= 0  and 2*a1 + 0*a2 + 2*a3 + 1*a4 >= 0 and 1*a1 + 0*a2 + 2*a3 + 1*a4 >= 0 and 2*a1 + 0*a2 + 1*a3 + 1*a4 >= 0 and 1*a1 + 0*a2 + 1*a3 + 1*a4 >= 0 and 1*a1 + -1*a2 + 1*a3 + 1*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + 1*a4 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 >= 0 and 1*a1 + -3*a2 + 0*a3 + 1*a4 >= 0 and 1*a1 + 1*a2 + -1*a3 + 1*a4 >= 0 and 0*a1 + 1*a2 + -1*a3 + 1*a4 >= 0 and 2*a1 + 0*a2 + 4*a3 + 0*a4 >= 0 and 2*a1 + 0*a2 + 2*a3 + 0*a4 >= 0 and 1*a1 + 0*a2 + 2*a3 + 0*a4 >= 0 and 2*a1 + 0*a2 + 1*a3 + 0*a4 >= 0 and 1*a1 + 0*a2 + 1*a3 + 0*a4 >= 0 and 1*a1 + -1*a2 + 1*a3 + 0*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + -2*a2 + 0*a3 + 0*a4 >= 0 and 2*a1 + -3*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + -3*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + 1*a2 + -1*a3 + 0*a4 >= 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 >= 0 and 3*a1 + 0*a2 + 4*a3 + -1*a4 >= 0 and 2*a1 + 0*a2 + 4*a3 + -1*a4 >= 0 and 2*a1 + 0*a2 + 3*a3 + -1*a4 >= 0 and 1*a1 + -1*a2 + 1*a3 + -1*a4 >= 0 and 1*a1 + 0*a2 + 0*a3 + -1*a4 >= 0 and 1*a1 + 1*a2 + -1*a3 + -1*a4 >= 0 and 0*a1 + 1*a2 + -1*a3 + -1*a4 >= 0 and 2*a1 + -1*a2 + 0*a3 + 0*a4 >= 0 and 1*a1 + -1*a2 + 0*a3 + 0*a4 >= 0 and 2*a1 + -2*a2 + 0*a3 + 0*a4 >= 0 and 2*a1 + -1*a2 + 0*a3 + -1*a4 >= 0 and 1*a1 + -1*a2 + 0*a3 + -1*a4 >= 0 and 2*a1 + -2*a2 + 0*a3 + -1*a4 >= 0 and 1*a1 + -2*a2 + 0*a3 + -1*a4 >= 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4] : false }

#hyperplane check: hyperplane is empty 

#result: false

#created hyperplane : { [d0 = 0, b0 = 1, c0 = -4, a1 = 1, a2 = 0, a3 = 0, a4 = 0] }

# [n, Id1] -> { [i0, i1, i2, i3] : exists bId1 : 1 * i0 + 0 * i1 + 0 * i2 + 0 * i3 + bId1 = 0 and 26 * Id1 <= bId1 <= 26 * (Id1 + 1) - 1 } 

#tiles for domain set  : [n] -> { S_1[i0, i1, i2, i3 = 1] : i0 <= -2 + n and i1 >= 0 and i0 + i1 <= i2 < 2i0 + i1 and i2 < n }

# [n, Id1] -> { S_1[i0, i1, i2, i3] : -25 - 26Id1 <= i0 <= -26Id1 } * [n] -> { S_1[i0, i1, i2, i3 = 1] : i0 <= -2 + n and i1 >= 0 and i0 + i1 <= i2 < 2i0 + i1 and i2 < n }

#result  : [n, Id1] -> { S_1[i0, i1, i2, i3 = 1] : -25 - 26Id1 <= i0 <= -26Id1 and i0 <= -2 + n and i1 >= 0 and i0 + i1 <= i2 < 2i0 + i1 and i2 < n }

#tiles for domain set  : [n] -> { S_0[i0, i1, i2, i3 = 0] : i0 <= -2 + n and i1 >= 0 and i0 + i1 <= i2 <= -2 + 2i0 + i1 and i2 < n }

# [n, Id1] -> { S_0[i0, i1, i2, i3] : -25 - 26Id1 <= i0 <= -26Id1 } * [n] -> { S_0[i0, i1, i2, i3 = 0] : i0 <= -2 + n and i1 >= 0 and i0 + i1 <= i2 <= -2 + 2i0 + i1 and i2 < n }

#result  : [n, Id1] -> { S_0[i0, i1, i2, i3 = 0] : -25 - 26Id1 <= i0 <= -26Id1 and i0 <= -2 + n and i1 >= 0 and i0 + i1 <= i2 <= -2 + 2i0 + i1 and i2 < n }

#created spaces:

#[space1]: hyperplane: i0 * ( 1 ) + i1 * ( 0 ) + i2 * ( 0 ) + i3 * ( 0 ) + b = 0

#create space end

#create tile relations start

#tlieOrder: [n, Id1', Id1] -> { S_1[i0, i1, i2, i3 = 1] : -25 - 26Id1 <= i0 <= -26Id1 and i0 <= -2 + n and i1 >= 0 and i0 + i1 <= i2 < 2i0 + i1 and i2 < n and not (Id1=Id1' ); S_0[i0, i1, i2, i3 = 0] : -25 - 26Id1 <= i0 <= -26Id1 and i0 <= -2 + n and i1 >= 0 and i0 + i1 <= i2 <= -2 + 2i0 + i1 and i2 < n  and not (Id1=Id1' )}

#rlation: [n] -> { S_0[i0, i1, i2, i3 = 0] -> S_1[i0', i1' = i1 - i0', i2' = i2, i3' = 1] : i0 + i1 <= i2 <= -2 + 2i0 + i1 and i2 < n and -i1 + i2 < i0' <= i1 }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_0[i0, i1, i2, i3 = 0] -> S_1[i0', i1' = i1 - i0', i2' = i2, i3' = 1] : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i0 <= -2 + n and i1 >= 0 and i2 >= i0 + i1 and i1 <= i2 <= -2 + 2i0 + i1 and i2 < n and i0' > -i1 + i2 and -25 - 26Id1' <= i0' <= -26Id1' and i0' <= i1 and i0' <= -2 + n }

#tile relation: [n] -> { S_0[Id1] -> S_1[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3' : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i0 + i1 <= i2 <= -2 + 2i0 + i1 and i2 < n and i0' > -i1 + i2 and -25 - 26Id1' <= i0' <= -26Id1' and i0' <= i1 and i0' <= -2 + n }

#rlation: [n] -> { S_0[i0, i1, i2, i3 = 0] -> S_1[i0', i1' = 1 + i1, i2' = -1 + i2, i3' = 1] : i1 >= 0 and i2 <= -2 + 2i0 + i1 and i2 < n and i0 <= i0' <= -2 - i1 + i2 }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_0[i0, i1, i2, i3 = 0] -> S_1[i0', i1' = 1 + i1, i2' = -1 + i2, i3' = 1] : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i0 <= -2 + n and i1 >= 0 and i0 + i1 <= i2 <= -2 + 2i0 + i1 and i2 < n and i0' >= i0 and -25 - 26Id1' <= i0' <= -26Id1' and i0' <= -2 - i1 + i2 and i0' <= -2 + n and 2i0' >= -1 - i1 + i2 }

#tile relation: [n] -> { S_0[Id1] -> S_1[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3' : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i1 >= 0 and i2 <= -2 + 2i0 + i1 and i2 < n and -25 - 26Id1' <= i0' <= -26Id1' and i0' <= -2 - i1 + i2 and 2i0' >= -1 - i1 + i2 }

#rlation: [n] -> { S_0[i0, i1, i2, i3 = 0] -> S_1[i0', i1' = i1, i2' = i2, i3' = 1] : i1 >= 0 and i2 <= -2 + 2i0 + i1 and i2 < n and i0 <= i0' <= -i1 + i2 and i0' <= -2 + n }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_0[i0, i1, i2, i3 = 0] -> S_1[i0', i1' = i1, i2' = i2, i3' = 1] : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i0 <= -2 + n and i1 >= 0 and i0 + i1 <= i2 <= -2 + 2i0 + i1 and i2 < n and i0' >= i0 and -25 - 26Id1' <= i0' <= -26Id1' and i0' <= -i1 + i2 and i0' <= -2 + n and 2i0' > -i1 + i2 }

#tile relation: [n] -> { S_0[Id1] -> S_1[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3' : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i1 >= 0 and i2 <= -2 + 2i0 + i1 and i2 < n and -25 - 26Id1' <= i0' <= -26Id1' and i0' <= -i1 + i2 and i0' <= -2 + n and 2i0' > -i1 + i2 }

#rlation: [n] -> { S_0[i0, i1, i2, i3 = 0] -> S_1[i0', i1' = -1 + i1, i2' = 1 + i2, i3' = 1] : i1 > 0 and i0 + i1 <= i2 <= -2 + 2i0 + i1 and i2 <= -2 + n and i0 < i0' <= 2 - i1 + i2 and i0' <= -2 + n }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_0[i0, i1, i2, i3 = 0] -> S_1[i0', i1' = -1 + i1, i2' = 1 + i2, i3' = 1] : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i0 <= -2 + n and i1 > 0 and i0 + i1 <= i2 <= -2 + 2i0 + i1 and i2 <= -2 + n and i0' > i0 and -25 - 26Id1' <= i0' <= -26Id1' and i0' <= 2 - i1 + i2 and i0' <= -2 + n and 2i0' >= 3 - i1 + i2 }

#tile relation: [n] -> { S_0[Id1] -> S_1[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3' : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i1 > 0 and i0 + i1 <= i2 <= -2 + 2i0 + i1 and i2 <= -2 + n and -25 - 26Id1' <= i0' <= -26Id1' and i0' <= 2 - i1 + i2 and i0' <= -2 + n and 2i0' >= 3 - i1 + i2 }

#rlation: [n] -> { S_0[i0, i1, i2, i3 = 0] -> S_1[i0' = 1 - i1 + i2, i1' = i1, i2', i3' = 1] : i1 >= 0 and i0 + i1 <= i2 <= -2 + 2i0 + i1 and i2 <= -3 + n + i1 and i2 < i2' <= 1 - i1 + 2i2 and i2' < n }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_0[i0, i1, i2, i3 = 0] -> S_1[i0' = 1 - i1 + i2, i1' = i1, i2', i3' = 1] : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i0 <= -2 + n and i1 >= 0 and i2 >= i0 + i1 and -26 - 26Id1' + i1 <= i2 < -26Id1' + i1 and i2 <= -2 + 2i0 + i1 and i2 < n and i2 <= -3 + n + i1 and i2 < i2' <= 1 - i1 + 2i2 and i2' < n }

#tile relation: [n] -> { S_0[Id1] -> S_1[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3' : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i1 >= 0 and -26 - 26Id1' + i1 <= i2 < -26Id1' + i1 and i2 <= -2 + 2i0 + i1 and i2 < n and i2 <= -3 + n + i1 and i2 < i2' <= 1 - i1 + 2i2 and i2' < n }

#rlation: [n] -> { S_1[i0, i1, i2, i3 = 1] -> S_1[i0', i1' = i1 - i0', i2' = i2, i3' = 1] : i0 + i1 <= i2 < 2i0 + i1 and i2 < n and -i1 + i2 < i0' <= i1 }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_1[i0, i1, i2, i3 = 1] -> S_1[i0', i1' = i1 - i0', i2' = i2, i3' = 1] : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i0 <= -2 + n and i1 >= 0 and i2 >= i0 + i1 and i1 <= i2 < 2i0 + i1 and i2 < n and i0' > -i1 + i2 and -25 - 26Id1' <= i0' <= -26Id1' and i0' <= i1 and i0' <= -2 + n }

#tile relation: [n] -> { S_1[Id1] -> S_1[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3' : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i0 + i1 <= i2 < 2i0 + i1 and i2 < n and i0' > -i1 + i2 and -25 - 26Id1' <= i0' <= -26Id1' and i0' <= i1 and i0' <= -2 + n }

#rlation: [n] -> { S_1[i0, i1, i2, i3 = 1] -> S_1[i0', i1' = 1 + i1, i2' = -1 + i2, i3' = 1] : i1 >= 0 and i2 < 2i0 + i1 and i2 < n and i0 <= i0' <= -2 - i1 + i2 }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_1[i0, i1, i2, i3 = 1] -> S_1[i0', i1' = 1 + i1, i2' = -1 + i2, i3' = 1] : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i0 <= -2 + n and i1 >= 0 and i0 + i1 <= i2 < 2i0 + i1 and i2 < n and i0' >= i0 and -25 - 26Id1' <= i0' <= -26Id1' and i0' <= -2 - i1 + i2 and i0' <= -2 + n and 2i0' >= -1 - i1 + i2 }

#tile relation: [n] -> { S_1[Id1] -> S_1[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3' : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i1 >= 0 and i2 < 2i0 + i1 and i2 < n and -25 - 26Id1' <= i0' <= -26Id1' and i0' <= -2 - i1 + i2 and 2i0' >= -1 - i1 + i2 }

#rlation: [n] -> { S_1[i0, i1, i2, i3 = 1] -> S_1[i0', i1' = i1, i2' = i2, i3' = 1] : i1 >= 0 and i2 < 2i0 + i1 and i2 < n and i0 < i0' <= -i1 + i2 and i0' <= -2 + n }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_1[i0, i1, i2, i3 = 1] -> S_1[i0', i1' = i1, i2' = i2, i3' = 1] : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i0 <= -2 + n and i1 >= 0 and i0 + i1 <= i2 < 2i0 + i1 and i2 < n and i0' > i0 and -25 - 26Id1' <= i0' <= -26Id1' and i0' <= -i1 + i2 and i0' <= -2 + n and 2i0' > -i1 + i2 }

#tile relation: [n] -> { S_1[Id1] -> S_1[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3' : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i1 >= 0 and i2 < 2i0 + i1 and i2 < n and -25 - 26Id1' <= i0' <= -26Id1' and i0' <= -i1 + i2 and i0' <= -2 + n and 2i0' > -i1 + i2 }

#rlation: [n] -> { S_1[i0, i1, i2, i3 = 1] -> S_1[i0', i1' = -1 + i1, i2' = 1 + i2, i3' = 1] : i1 > 0 and i0 + i1 <= i2 < 2i0 + i1 and i2 <= -2 + n and i0 < i0' <= 2 - i1 + i2 and i0' <= -2 + n }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_1[i0, i1, i2, i3 = 1] -> S_1[i0', i1' = -1 + i1, i2' = 1 + i2, i3' = 1] : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i0 <= -2 + n and i1 > 0 and i0 + i1 <= i2 < 2i0 + i1 and i2 <= -2 + n and i0' > i0 and -25 - 26Id1' <= i0' <= -26Id1' and i0' <= 2 - i1 + i2 and i0' <= -2 + n and 2i0' >= 3 - i1 + i2 }

#tile relation: [n] -> { S_1[Id1] -> S_1[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3' : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i1 > 0 and i0 + i1 <= i2 < 2i0 + i1 and i2 <= -2 + n and -25 - 26Id1' <= i0' <= -26Id1' and i0' <= 2 - i1 + i2 and i0' <= -2 + n and 2i0' >= 3 - i1 + i2 }

#rlation: [n] -> { S_1[i0, i1, i2, i3 = 1] -> S_1[i0' = 1 - i1 + i2, i1' = i1, i2', i3' = 1] : i1 >= 0 and i0 + i1 <= i2 < 2i0 + i1 and i2 <= -3 + n + i1 and i2 < i2' <= 1 - i1 + 2i2 and i2' < n }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_1[i0, i1, i2, i3 = 1] -> S_1[i0' = 1 - i1 + i2, i1' = i1, i2', i3' = 1] : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i0 <= -2 + n and i1 >= 0 and i2 >= i0 + i1 and -26 - 26Id1' + i1 <= i2 < -26Id1' + i1 and i2 < 2i0 + i1 and i2 < n and i2 <= -3 + n + i1 and i2 < i2' <= 1 - i1 + 2i2 and i2' < n }

#tile relation: [n] -> { S_1[Id1] -> S_1[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3' : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i1 >= 0 and -26 - 26Id1' + i1 <= i2 < -26Id1' + i1 and i2 < 2i0 + i1 and i2 < n and i2 <= -3 + n + i1 and i2 < i2' <= 1 - i1 + 2i2 and i2' < n }

#rlation: [n] -> { S_0[i0, i1, i2, i3 = 0] -> S_0[i0', i1' = i1, i2' = i2 + i0', i3' = 0] : i1 >= 0 and i0 + i1 <= i2 <= -2 + 2i0 + i1 and 2 - i1 + i2 <= i0' < n - i2 }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_0[i0, i1, i2, i3 = 0] -> S_0[i0', i1' = i1, i2' = i2 + i0', i3' = 0] : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i0 <= -2 + n and i1 >= 0 and i2 >= i0 + i1 and i1 <= i2 <= -2 + 2i0 + i1 and i2 < n and i0' >= 2 - i1 + i2 and -25 - 26Id1' <= i0' <= -26Id1' and i0' < n - i2 and i0' <= -2 + n }

#tile relation: [n] -> { S_0[Id1] -> S_0[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3' : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i1 >= 0 and i0 + i1 <= i2 <= -2 + 2i0 + i1 and i0' >= 2 - i1 + i2 and -25 - 26Id1' <= i0' <= -26Id1' and i0' < n - i2 and i0' <= -2 + n }

#rlation: [n] -> { S_0[i0, i1, i2, i3 = 0] -> S_0[i0', i1' = 1 + i1, i2' = -1 + i2, i3' = 0] : i1 >= 0 and i2 <= -2 + 2i0 + i1 and i2 < n and i0 <= i0' <= -2 - i1 + i2 }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_0[i0, i1, i2, i3 = 0] -> S_0[i0', i1' = 1 + i1, i2' = -1 + i2, i3' = 0] : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i0 <= -2 + n and i1 >= 0 and i0 + i1 <= i2 <= -2 + 2i0 + i1 and i2 < n and i0' >= i0 and -25 - 26Id1' <= i0' <= -26Id1' and i0' <= -2 - i1 + i2 and i0' <= -2 + n and 2i0' >= -i1 + i2 }

#tile relation: [n] -> { S_0[Id1] -> S_0[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3' : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i1 >= 0 and i2 <= -2 + 2i0 + i1 and i2 < n and -25 - 26Id1' <= i0' <= -26Id1' and i0' <= -2 - i1 + i2 and 2i0' >= -i1 + i2 }

#rlation: [n] -> { S_0[i0, i1, i2, i3 = 0] -> S_0[i0', i1' = i1, i2' = i2, i3' = 0] : i1 >= 0 and i2 <= -2 + 2i0 + i1 and i2 < n and i0 < i0' <= -i1 + i2 and i0' <= -2 + n }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_0[i0, i1, i2, i3 = 0] -> S_0[i0', i1' = i1, i2' = i2, i3' = 0] : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i0 <= -2 + n and i1 >= 0 and i0 + i1 <= i2 <= -2 + 2i0 + i1 and i2 < n and i0' > i0 and -25 - 26Id1' <= i0' <= -26Id1' and i0' <= -i1 + i2 and i0' <= -2 + n and 2i0' >= 2 - i1 + i2 }

#tile relation: [n] -> { S_0[Id1] -> S_0[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3' : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i1 >= 0 and i2 <= -2 + 2i0 + i1 and i2 < n and -25 - 26Id1' <= i0' <= -26Id1' and i0' <= -i1 + i2 and i0' <= -2 + n and 2i0' >= 2 - i1 + i2 }

#rlation: [n] -> { S_0[i0, i1, i2, i3 = 0] -> S_0[i0', i1' = -1 + i1, i2' = 1 + i2, i3' = 0] : i1 > 0 and i0 + i1 <= i2 <= -2 + 2i0 + i1 and i2 <= -2 + n and i0 < i0' <= 2 - i1 + i2 and i0' <= -2 + n }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_0[i0, i1, i2, i3 = 0] -> S_0[i0', i1' = -1 + i1, i2' = 1 + i2, i3' = 0] : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i0 <= -2 + n and i1 > 0 and i0 + i1 <= i2 <= -2 + 2i0 + i1 and i2 <= -2 + n and i0' > i0 and -25 - 26Id1' <= i0' <= -26Id1' and i0' <= 2 - i1 + i2 and i0' <= -2 + n and 2i0' >= 4 - i1 + i2 }

#tile relation: [n] -> { S_0[Id1] -> S_0[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3' : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i1 > 0 and i0 + i1 <= i2 <= -2 + 2i0 + i1 and i2 <= -2 + n and -25 - 26Id1' <= i0' <= -26Id1' and i0' <= 2 - i1 + i2 and i0' <= -2 + n and 2i0' >= 4 - i1 + i2 }

#rlation: [n] -> { S_0[i0, i1, i2, i3 = 0] -> S_0[i0' = 1 - i1 + i2, i1', i2' = i2, i3' = 0] : i0 + i1 <= i2 <= -2 + 2i0 + i1 and i2 < n and i2 <= -3 + n + i1 and i1' >= 2i1 - i2 and 0 <= i1' < i1 }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_0[i0, i1, i2, i3 = 0] -> S_0[i0' = 1 - i1 + i2, i1', i2' = i2, i3' = 0] : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i0 <= -2 + n and i1 >= 0 and i2 >= i0 + i1 and -26 - 26Id1' + i1 <= i2 < -26Id1' + i1 and i2 <= -2 + 2i0 + i1 and i2 < n and i2 <= -3 + n + i1 and i1' >= 2i1 - i2 and 0 <= i1' < i1 }

#tile relation: [n] -> { S_0[Id1] -> S_0[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3' : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i1 >= 0 and -26 - 26Id1' + i1 <= i2 < -26Id1' + i1 and i2 <= -2 + 2i0 + i1 and i2 < n and i2 <= -3 + n + i1 and i1' >= 2i1 - i2 and 0 <= i1' < i1 }

#rlation: [n] -> { S_1[i0, i1, i2, i3 = 1] -> S_0[i0', i1', i2' = i1 + i2 - i1', i3' = 0] : i0 + i1 <= i2 < 2i0 + i1 and i0 < i0' <= -2 + n and i1' >= -1 + i1 and i1' >= 3 + i2 - 2i0' and i1' >= 0 and -n + i1 + i2 < i1' <= i1 and 2i1' <= i1 + i2 - i0' }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_1[i0, i1, i2, i3 = 1] -> S_0[i0', i1', i2' = i1 + i2 - i1', i3' = 0] : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i0 <= -2 + n and i1 >= 0 and i0 + i1 <= i2 < 2i0 + i1 and i2 < n and i0' > i0 and -25 - 26Id1' <= i0' <= -26Id1' and i0' <= -2 + n and i1' >= -1 + i1 and i1' >= 3 + i2 - 2i0' and i1' >= 0 and -n + i1 + i2 < i1' <= i1 and 2 + i1 + i2 - 2i0' <= 2i1' <= i1 + i2 - i0' }

#tile relation: [n] -> { S_1[Id1] -> S_0[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3' : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i0 + i1 <= i2 < 2i0 + i1 and -25 - 26Id1' <= i0' <= -26Id1' and i0' <= -2 + n and i1' >= -1 + i1 and i1' >= 3 + i2 - 2i0' and i1' >= 0 and -n + i1 + i2 < i1' <= i1 and 2 + i1 + i2 - 2i0' <= 2i1' <= i1 + i2 - i0' }

#rlation: [n] -> { S_1[i0, i1, i2, i3 = 1] -> S_0[i0', i1' = i1, i2' = i2 + i0', i3' = 0] : i1 >= 0 and i0 + i1 <= i2 < 2i0 + i1 and 2 - i1 + i2 <= i0' < n - i2 }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_1[i0, i1, i2, i3 = 1] -> S_0[i0', i1' = i1, i2' = i2 + i0', i3' = 0] : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i0 <= -2 + n and i1 >= 0 and i2 >= i0 + i1 and i1 <= i2 < 2i0 + i1 and i2 < n and i0' >= 2 - i1 + i2 and -25 - 26Id1' <= i0' <= -26Id1' and i0' < n - i2 and i0' <= -2 + n }

#tile relation: [n] -> { S_1[Id1] -> S_0[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3' : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i1 >= 0 and i0 + i1 <= i2 < 2i0 + i1 and i0' >= 2 - i1 + i2 and -25 - 26Id1' <= i0' <= -26Id1' and i0' < n - i2 and i0' <= -2 + n }

#rlation: [n] -> { S_1[i0, i1, i2, i3 = 1] -> S_0[i0', i1' = 1 + i1, i2' = -1 + i2, i3' = 0] : i1 >= 0 and i2 < 2i0 + i1 and i2 < n and i0 <= i0' <= -2 - i1 + i2 }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_1[i0, i1, i2, i3 = 1] -> S_0[i0', i1' = 1 + i1, i2' = -1 + i2, i3' = 0] : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i0 <= -2 + n and i1 >= 0 and i0 + i1 <= i2 < 2i0 + i1 and i2 < n and i0' >= i0 and -25 - 26Id1' <= i0' <= -26Id1' and i0' <= -2 - i1 + i2 and i0' <= -2 + n and 2i0' >= -i1 + i2 }

#tile relation: [n] -> { S_1[Id1] -> S_0[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3' : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i1 >= 0 and i2 < 2i0 + i1 and i2 < n and -25 - 26Id1' <= i0' <= -26Id1' and i0' <= -2 - i1 + i2 and 2i0' >= -i1 + i2 }

#rlation: [n] -> { S_1[i0, i1, i2, i3 = 1] -> S_0[i0' = 1 - i1 + i2, i1', i2' = i2, i3' = 0] : i0 + i1 <= i2 < 2i0 + i1 and i2 < n and i2 <= -3 + n + i1 and i1' >= 2i1 - i2 and 0 <= i1' < i1 }

#(rlation * tile)->*tlieOrder: [n, Id1, Id1'] -> { S_1[i0, i1, i2, i3 = 1] -> S_0[i0' = 1 - i1 + i2, i1', i2' = i2, i3' = 0] : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i0 <= -2 + n and i1 >= 0 and i2 >= i0 + i1 and -26 - 26Id1' + i1 <= i2 < -26Id1' + i1 and i2 < 2i0 + i1 and i2 < n and i2 <= -3 + n + i1 and i1' >= 2i1 - i2 and 0 <= i1' < i1 }

#tile relation: [n] -> { S_1[Id1] -> S_0[Id1'] : exists i0,i0',i1,i1',i2,i2',i3,i3' : Id1' < Id1 and -25 - 26Id1 <= i0 <= -26Id1 and i1 >= 0 and -26 - 26Id1' + i1 <= i2 < -26Id1' + i1 and i2 < 2i0 + i1 and i2 < n and i2 <= -3 + n + i1 and i1' >= 2i1 - i2 and 0 <= i1' < i1 }

#tile relations: [n] -> { S_0[Id1] -> S_0[Id1'] : Id1' < Id1 and 26Id1' >= -23 - n and (Id1' >= 2Id1 or (Id1 < 0 and 26Id1' >= -22 - n and 26Id1' >= -49 - n - 26Id1)); S_1[Id1] -> S_1[Id1'] : Id1 < 0 and Id1' < Id1 and (26Id1' >= -49 - n - 26Id1 or (Id1' >= -1 + 2Id1 and 26Id1' >= -23 - n)); S_0[Id1] -> S_1[Id1'] : Id1' < Id1 and 26Id1' >= -23 - n and (Id1' >= 2Id1 or (Id1 < 0 and 26Id1' >= -22 - n and 26Id1' >= -49 - n - 26Id1)); S_1[Id1] -> S_0[Id1'] : Id1 < 0 and Id1' < Id1 and (26Id1' >= -49 - n - 26Id1 or (Id1' >= -1 + 2Id1 and 26Id1' >= -23 - n)) }

#create tile relations end

#create stencil schedule start

#tile relatiions delta: { [Id1] : Id1 < 0 }

#tile relatiions distance vectors set: { [Id1 = -1]; [Id1 = -2] }

#tile relatiions distance vectors to scan: { [Id1 = -1]; [Id1 = -2] }

#wafefront hyperplane: lexmin( {[d0 = 0, b0, c0, a1] : exists c1 : ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and c0 = c1 and a1 != 0} * {[d0, b0, c0, a1] : exists b1 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and b0 > 0 and b0 = b1 and -1*a1 > 0 and -2*a1 > 0 } )

#result: { [d0 = 0, b0 = 1, c0 = 0, a1 = -1] }

#stencil schedule map: [n] -> { S_1[i0, i1, i2, i3] -> [Wid1, Id1, i0, i1, i2, 1] : Wid1 = -1 * Id1 + 0 and  -25 - 26Id1 <= i0 <= -26Id1  ; S_0[i0, i1, i2, i3] -> [Wid1, Id1, i0, i1, i2, 0]  : Wid1 = -1 * Id1 + 0 and  -25 - 26Id1 <= i0 <= -26Id1  } 
 
#create stencil schedule end

#create stencil schedule code start

#stencilScheduleMap: [n] -> { S_0[i0, i1, i2, i3] -> [Wid1, Id1 = -Wid1, i0, i1, i2, 0] : i0 <= 26Wid1 <= 25 + i0; S_1[i0, i1, i2, i3] -> [Wid1, Id1 = -Wid1, i0, i1, i2, 1] : i0 <= 26Wid1 <= 25 + i0 }

#domain_union_set: [n] -> { S_1[i0, i1, i2, i3 = 1] : i0 <= -2 + n and i1 >= 0 and i0 + i1 <= i2 < 2i0 + i1 and i2 < n; S_0[i0, i1, i2, i3 = 0] : i0 <= -2 + n and i1 >= 0 and i0 + i1 <= i2 <= -2 + 2i0 + i1 and i2 < n }

#stencilGlobalSchedule: [n] -> { S_1[i0, i1, i2, i3 = 1] -> [Wid1, Id1 = -Wid1, i0, i1, i2, 1] : i0 <= -2 + n and i1 >= 0 and i0 + i1 <= i2 < 2i0 + i1 and i2 < n and i0 <= 26Wid1 <= 25 + i0; S_0[i0, i1, i2, i3 = 0] -> [Wid1, Id1 = -Wid1, i0, i1, i2, 0] : i0 <= -2 + n and i1 >= 0 and i0 + i1 <= i2 <= -2 + 2i0 + i1 and i2 < n and i0 <= 26Wid1 <= 25 + i0 }

#mapper_union_map: [n] -> { S_0[c0, c1, c2] -> S_0[i0 = c0, i1 = c1, i2 = c2, i3 = 0]; S_1[c0, c1, c2] -> S_1[i0 = c0, i1 = c1, i2 = c2, i3 = 1] }

#stencilGlobalSchedule: [n] -> { S_0[c0, c1, c2] -> [Wid1, Id1 = -Wid1, c0, c1, c2, 0] : c0 <= -2 + n and c1 >= 0 and c0 + c1 <= c2 <= -2 + 2c0 + c1 and c2 < n and c0 <= 26Wid1 <= 25 + c0; S_1[c0, c1, c2] -> [Wid1, Id1 = -Wid1, c0, c1, c2, 1] : c0 <= -2 + n and c1 >= 0 and c0 + c1 <= c2 < 2c0 + c1 and c2 < n and c0 <= 26Wid1 <= 25 + c0 }

#create stencil schedule code end

#wavefront card calculate start

#card set: [] -> { [Wid1] : exists n, Id1, i0, i1, i2, i3 : n <= 1000 and n >= 0 and   Wid1 = -1 * Id1 + 0 and   i3 = 1 and -25 - 26Id1 <= i0 <= -26Id1 and i0 <= -2 + n and i1 >= 0 and i0 + i1 <= i2 < 2i0 + i1 and i2 < n  } 

#result: { [Wid1] : 0 < Wid1 <= 39 }

#card set: [] -> { [Wid1] : exists n, Id1, i0, i1, i2, i3 : n <= 1000 and n >= 0 and   Wid1 = -1 * Id1 + 0 and   i3 = 0 and -25 - 26Id1 <= i0 <= -26Id1 and i0 <= -2 + n and i1 >= 0 and i0 + i1 <= i2 <= -2 + 2i0 + i1 and i2 < n  } 

#result: { [Wid1] : 0 < Wid1 <= 39 }

#card union set: [n] -> { [Wid1] : exists Id1, i0, i1, i2, i3 : Wid1 = -1 * Id1 + 0 and   i3 = 1 and -25 - 26Id1 <= i0 <= -26Id1 and i0 <= -2 + n and i1 >= 0 and i0 + i1 <= i2 < 2i0 + i1 and i2 < n  } 

#result: [n] -> { [Wid1] : Wid1 > 0 and 26Wid1 <= 23 + n }

#card union set: [n] -> { [Wid1] : exists Id1, i0, i1, i2, i3 : Wid1 = -1 * Id1 + 0 and   i3 = 0 and -25 - 26Id1 <= i0 <= -26Id1 and i0 <= -2 + n and i1 >= 0 and i0 + i1 <= i2 <= -2 + 2i0 + i1 and i2 < n  } 

#result: [n] -> { [Wid1] : n >= 4 and Wid1 > 0 and 26Wid1 <= 23 + n }

#wavefront card set: { [Wid1] : 0 < Wid1 <= 39 }

#wavefront card union set: [n] -> { [Wid1] : Wid1 > 0 and 26Wid1 <= 23 + n }

#Wavefront card calculate end

#stencil scop end
