./PerfectLoopsMP.c:32:13: warning: implicit declaration of function 'getFullCopy' is invalid in C99
  int** S = getFullCopy(table, n);
            ^
./PerfectLoopsMP.c:32:9: warning: incompatible integer to pointer conversion initializing 'int **' with an expression of type 'int'
  int** S = getFullCopy(table, n);
        ^   ~~~~~~~~~~~~~~~~~~~~~
./PerfectLoopsMP.c:34:18: warning: implicit declaration of function 'omp_get_wtime' is invalid in C99
  double start = omp_get_wtime();
                 ^
./PerfectLoopsMP.c:55:3: warning: implicitly declaring library function 'printf' with type 'int (const char *, ...)'
  printf("PERWIF: %lf\n", execution_time);
  ^
./PerfectLoopsMP.c:55:3: note: include the header <stdio.h> or explicitly provide a declaration for 'printf'
./PerfectLoopsMP.c:56:3: warning: implicit declaration of function 'write_results' is invalid in C99
  write_results(n, execution_time);
  ^
./PerfectLoopsMP.c:57:3: warning: implicit declaration of function 'printMatrix' is invalid in C99
  printMatrix(S, n, 2);
  ^
./PerfectLoopsMP.c:58:3: warning: implicit declaration of function 'deallocateMatrix' is invalid in C99
  deallocateMatrix(S, n);
  ^
./PerfectLoopsMP.c:16:5: warning: return statement must be final statement in function
    return s1;
    ^~~~~~~~~

#stencil scop start

#delta analyze start

#distance vectors set : { [i0 = 0, i1 = 0, i2 = 1]; [i0 = 1, i1 = -1, i2 = 1]; [i0 = 1, i1 = -1, i2 = 0]; [i0 = 1, i1 = -1, i2 = -1] }

#distance vectors set : { [i0 = 1, i1 = -1, i2 = 0] }

#selected distance vector: { [i0 = 0, i1 = 0, i2 = 1] }

#selected distance vector: { [i0 = 1, i1 = -1, i2 = 1] }

#selected distance vector: { [i0 = 1, i1 = -1, i2 = 0] }

#selected distance vector: { [i0 = 1, i1 = -1, i2 = -1] }

#analyze loop dimensions:

#[i0]:  is not parameter

#[i1]:  negative: { [i0 = 1, i1 = -1, i2 = 1] }  is not parameter

#[i2]:  positive: { [i0 = 0, i1 = 0, i2 = 1] }  negative: { [i0 = 1, i1 = -1, i2 = -1] }  is not parameter, is order dim

#delta analyze end

#create space start

#hyperplane_for_dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3] : a1 != 0 } * {[d0, b0, c0, a1, a2, a3] : exists b1, c1, b2, c2, b3, c3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and c0 = c1 + c2 + c3 and 0*a1 + 0*a2 + 1*a3 >= 0 and 1*a1 + -1*a2 + 1*a3 >= 0 and 1*a1 + -1*a2 + 0*a3 >= 0 and 1*a1 + -1*a2 + -1*a3 >= 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -3, a1 = 1, a2 = 0, a3 = 0] }

#hyperplane check: first hyperplane 

#result: true

#hyperplane_for_dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3] : a2 != 0 } * {[d0, b0, c0, a1, a2, a3] : exists b1, c1, b2, c2, b3, c3 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 and c0 = c1 + c2 + c3 and 0*a1 + 0*a2 + 1*a3 >= 0 and 1*a1 + -1*a2 + 1*a3 >= 0 and 1*a1 + -1*a2 + 0*a3 >= 0 and 1*a1 + -1*a2 + -1*a3 >= 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -2, a1 = 0, a2 = -1, a3 = 0] }

#hyperplane check: { : exists c1, c2 : ( c1!=0 or c2!=0 ) and c2*0 = c1*1 and c2*-1 = c1*0 and c2*0 = c1*0 } = {}

#result: true

#created hyperplane : { [d0 = 0, b0 = 1, c0 = -3, a1 = 1, a2 = 0, a3 = 0] }

#created hyperplane : { [d0 = 0, b0 = 1, c0 = -2, a1 = 0, a2 = -1, a3 = 0] }

# [c0, n, Id1] -> { [i0, i1, i2] : exists bId1 : 1 * i0 + 0 * i1 + 0 * i2 + bId1 = 0 and 26 * Id1 <= bId1 <= 26 * (Id1 + 1) - 1 } 

# [c0, n, Id2] -> { [i0, i1, i2] : exists bId2 : 0 * i0 + -1 * i1 + 0 * i2 + bId2 = 0 and 30 * Id2 <= bId2 <= 30 * (Id2 + 1) - 1 } 

#tiles for domain set  : [c0, n] -> { S_0[i0, i1, i2 = 0] : i0 >= 0 and c0 + i0 <= i1 < n and i1 <= -2 + 2c0 + i0 }

# [c0, n, Id2, Id1] -> { S_0[i0, i1, i2] : -25 - 26Id1 <= i0 <= -26Id1 and 30Id2 <= i1 <= 29 + 30Id2 } * [c0, n] -> { S_0[i0, i1, i2 = 0] : i0 >= 0 and c0 + i0 <= i1 < n and i1 <= -2 + 2c0 + i0 }

#result  : [c0, n, Id2, Id1] -> { S_0[i0, i1, i2 = 0] : i0 >= 0 and -25 - 26Id1 <= i0 <= -26Id1 and i1 >= c0 + i0 and 30Id2 <= i1 <= 29 + 30Id2 and i1 < n and i1 <= -2 + 2c0 + i0 }

#tiles for domain set  : [c0, n] -> { S_1[i0, i1, i2 = 1] : i0 >= 0 and c0 + i0 <= i1 < n and i1 < 2c0 + i0 }

# [c0, n, Id2, Id1] -> { S_1[i0, i1, i2] : -25 - 26Id1 <= i0 <= -26Id1 and 30Id2 <= i1 <= 29 + 30Id2 } * [c0, n] -> { S_1[i0, i1, i2 = 1] : i0 >= 0 and c0 + i0 <= i1 < n and i1 < 2c0 + i0 }

#result  : [c0, n, Id2, Id1] -> { S_1[i0, i1, i2 = 1] : i0 >= 0 and -25 - 26Id1 <= i0 <= -26Id1 and i1 >= c0 + i0 and 30Id2 <= i1 <= 29 + 30Id2 and i1 < n and i1 < 2c0 + i0 }

#created spaces:

#[space1]: hyperplane: i0 * ( 1 ) + i1 * ( 0 ) + i2 * ( 0 ) + b = 0

#[space2]: hyperplane: i0 * ( 0 ) + i1 * ( -1 ) + i2 * ( 0 ) + b = 0

#create space end

#create tile relations start

#tlieOrder: [c0, n, Id2', Id2, Id1', Id1] -> { S_1[i0, i1, i2 = 1] : i0 >= 0 and -25 - 26Id1 <= i0 <= -26Id1 and i1 >= c0 + i0 and 30Id2 <= i1 <= 29 + 30Id2 and i1 < n and i1 < 2c0 + i0 and not (Id1=Id1' and Id2=Id2' ); S_0[i0, i1, i2 = 0] : i0 >= 0 and -25 - 26Id1 <= i0 <= -26Id1 and i1 >= c0 + i0 and 30Id2 <= i1 <= 29 + 30Id2 and i1 < n and i1 <= -2 + 2c0 + i0  and not (Id1=Id1' and Id2=Id2' )}

#rlation: [c0, n] -> { S_0[i0, i1, i2 = 0] -> S_1[i0' = i0, i1' = i1, i2' = 1] : i0 >= 0 and c0 + i0 <= i1 < n and i1 <= -2 + 2c0 + i0 }

#(rlation * tile)->*tlieOrder: [c0, n, Id2, Id2', Id1, Id1'] -> {  }

#rlation: [c0, n] -> { S_0[i0, i1, i2 = 0] -> S_1[i0' = 1 + i0, i1' = -1 + i1, i2' = 1] : i0 >= 0 and 2 + c0 + i0 <= i1 < n and i1 <= -2 + 2c0 + i0 }

#(rlation * tile)->*tlieOrder: [c0, n, Id2, Id2', Id1, Id1'] -> { S_0[i0, i1, i2 = 0] -> S_1[i0' = 1 + i0, i1' = -1 + i1, i2' = 1] : 29Id1' <= -15 + 15Id2 - 15Id2' + 29Id1 and i0 >= 0 and i0 >= -25 - Id1 - 25Id1' and 2 - 2c0 + 30Id2 <= i0 <= -2 - c0 + 30Id2 + 29Id1 - 29Id1' and i0 < -25Id1 - Id1' and i1 >= -23 + c0 - Id1 - 25Id1' and i1 >= 30Id2 and 30Id2' < i1 <= 30 + 30Id2' and i1 <= 30Id2 + 29Id1 - 29Id1' and i1 < n and i1 <= -2 + 2c0 - 26Id1 }

#tile relation: [c0, n] -> { S_0[Id1,Id2] -> S_1[Id1',Id2'] : exists i0,i0',i1,i1',i2,i2' : 29Id1' <= -15 + 15Id2 - 15Id2' + 29Id1 and i0 >= 0 and i0 >= -25 - Id1 - 25Id1' and 2 - 2c0 + 30Id2 <= i0 <= -2 - c0 + 30Id2 + 29Id1 - 29Id1' and i0 < -25Id1 - Id1' and i1 >= -23 + c0 - Id1 - 25Id1' and i1 >= 30Id2 and 30Id2' < i1 <= 30 + 30Id2' and i1 <= 30Id2 + 29Id1 - 29Id1' and i1 < n and i1 <= -2 + 2c0 - 26Id1 }

#rlation: [c0, n] -> { S_1[i0, i1, i2 = 1] -> S_0[i0' = 1 + i0, i1' = -1 + i1, i2' = 0] : i0 >= 0 and 2 + c0 + i0 <= i1 < n and i1 < 2c0 + i0 }

#(rlation * tile)->*tlieOrder: [c0, n, Id2, Id2', Id1, Id1'] -> { S_1[i0, i1, i2 = 1] -> S_0[i0' = 1 + i0, i1' = -1 + i1, i2' = 0] : 29Id1' <= -15 + 15Id2 - 15Id2' + 29Id1 and i0 >= 0 and i0 >= -25 - Id1 - 25Id1' and -2c0 + 30Id2 < i0 <= -2 - c0 + 30Id2 + 29Id1 - 29Id1' and i0 < -25Id1 - Id1' and i1 >= -23 + c0 - Id1 - 25Id1' and i1 >= 30Id2 and 30Id2' < i1 <= 30 + 30Id2' and i1 <= 30Id2 + 29Id1 - 29Id1' and i1 < n and i1 < 2c0 - 26Id1 }

#tile relation: [c0, n] -> { S_1[Id1,Id2] -> S_0[Id1',Id2'] : exists i0,i0',i1,i1',i2,i2' : 29Id1' <= -15 + 15Id2 - 15Id2' + 29Id1 and i0 >= 0 and i0 >= -25 - Id1 - 25Id1' and -2c0 + 30Id2 < i0 <= -2 - c0 + 30Id2 + 29Id1 - 29Id1' and i0 < -25Id1 - Id1' and i1 >= -23 + c0 - Id1 - 25Id1' and i1 >= 30Id2 and 30Id2' < i1 <= 30 + 30Id2' and i1 <= 30Id2 + 29Id1 - 29Id1' and i1 < n and i1 < 2c0 - 26Id1 }

#rlation: [c0, n] -> { S_0[i0, i1, i2 = 0] -> S_0[i0' = 1 + i0, i1' = -1 + i1, i2' = 0] : i0 >= 0 and 2 + c0 + i0 <= i1 < n and i1 <= -2 + 2c0 + i0 }

#(rlation * tile)->*tlieOrder: [c0, n, Id2, Id2', Id1, Id1'] -> { S_0[i0, i1, i2 = 0] -> S_0[i0' = 1 + i0, i1' = -1 + i1, i2' = 0] : 29Id1' <= -15 + 15Id2 - 15Id2' + 29Id1 and i0 >= 0 and i0 >= -25 - Id1 - 25Id1' and 2 - 2c0 + 30Id2 <= i0 <= -2 - c0 + 30Id2 + 29Id1 - 29Id1' and i0 < -25Id1 - Id1' and i1 >= -23 + c0 - Id1 - 25Id1' and i1 >= 30Id2 and 30Id2' < i1 <= 30 + 30Id2' and i1 <= 30Id2 + 29Id1 - 29Id1' and i1 < n and i1 <= -2 + 2c0 - 26Id1 }

#tile relation: [c0, n] -> { S_0[Id1,Id2] -> S_0[Id1',Id2'] : exists i0,i0',i1,i1',i2,i2' : 29Id1' <= -15 + 15Id2 - 15Id2' + 29Id1 and i0 >= 0 and i0 >= -25 - Id1 - 25Id1' and 2 - 2c0 + 30Id2 <= i0 <= -2 - c0 + 30Id2 + 29Id1 - 29Id1' and i0 < -25Id1 - Id1' and i1 >= -23 + c0 - Id1 - 25Id1' and i1 >= 30Id2 and 30Id2' < i1 <= 30 + 30Id2' and i1 <= 30Id2 + 29Id1 - 29Id1' and i1 < n and i1 <= -2 + 2c0 - 26Id1 }

#rlation: [c0, n] -> { S_1[i0, i1, i2 = 1] -> S_1[i0' = 1 + i0, i1' = -1 + i1, i2' = 1] : i0 >= 0 and 2 + c0 + i0 <= i1 < n and i1 < 2c0 + i0 }

#(rlation * tile)->*tlieOrder: [c0, n, Id2, Id2', Id1, Id1'] -> { S_1[i0, i1, i2 = 1] -> S_1[i0' = 1 + i0, i1' = -1 + i1, i2' = 1] : 29Id1' <= -15 + 15Id2 - 15Id2' + 29Id1 and i0 >= 0 and i0 >= -25 - Id1 - 25Id1' and -2c0 + 30Id2 < i0 <= -2 - c0 + 30Id2 + 29Id1 - 29Id1' and i0 < -25Id1 - Id1' and i1 >= -23 + c0 - Id1 - 25Id1' and i1 >= 30Id2 and 30Id2' < i1 <= 30 + 30Id2' and i1 <= 30Id2 + 29Id1 - 29Id1' and i1 < n and i1 < 2c0 - 26Id1 }

#tile relation: [c0, n] -> { S_1[Id1,Id2] -> S_1[Id1',Id2'] : exists i0,i0',i1,i1',i2,i2' : 29Id1' <= -15 + 15Id2 - 15Id2' + 29Id1 and i0 >= 0 and i0 >= -25 - Id1 - 25Id1' and -2c0 + 30Id2 < i0 <= -2 - c0 + 30Id2 + 29Id1 - 29Id1' and i0 < -25Id1 - Id1' and i1 >= -23 + c0 - Id1 - 25Id1' and i1 >= 30Id2 and 30Id2' < i1 <= 30 + 30Id2' and i1 <= 30Id2 + 29Id1 - 29Id1' and i1 < n and i1 < 2c0 - 26Id1 }

#tile relations: [c0, n] -> { S_0[Id1, Id2] -> S_1[Id1', Id2'] : 30Id2 < n and -1 + Id1 <= Id1' < -25Id1 and Id1' <= -3 + 2c0 - 25Id1 - 30Id2 and 4Id1' <= 23 - c0 + 30Id1 + 30Id2 and 25Id1' >= -22 + c0 - n - Id1 and 25Id1' >= -21 - c0 + 25Id1 and 29Id1' <= -2 - c0 + 29Id1 + 30Id2 and 29Id1' <= -4 + c0 + 29Id1 and Id2' >= -1 + Id2 and 15Id2' <= -15 + 29Id1 + 15Id2 - 29Id1' and 15Id2' <= -2 + c0 - 13Id1 and -53 + c0 - Id1 - 25Id1' <= 30Id2' <= -2 + n; S_0[Id1, Id2] -> S_0[Id1', Id2'] : 30Id2 < n and -1 + Id1 <= Id1' < -25Id1 and Id1' <= -3 + 2c0 - 25Id1 - 30Id2 and 4Id1' <= 23 - c0 + 30Id1 + 30Id2 and 25Id1' >= -22 + c0 - n - Id1 and 25Id1' >= -21 - c0 + 25Id1 and 29Id1' <= -2 - c0 + 29Id1 + 30Id2 and 29Id1' <= -4 + c0 + 29Id1 and Id2' >= -1 + Id2 and 15Id2' <= -15 + 29Id1 + 15Id2 - 29Id1' and 15Id2' <= -2 + c0 - 13Id1 and -53 + c0 - Id1 - 25Id1' <= 30Id2' <= -2 + n; S_1[Id1, Id2] -> S_0[Id1', Id2'] : 30Id2 < n and -1 + Id1 <= Id1' < -25Id1 and Id1' <= -2 + 2c0 - 25Id1 - 30Id2 and 4Id1' <= 23 - c0 + 30Id1 + 30Id2 and 25Id1' >= -22 + c0 - n - Id1 and 25Id1' >= -22 - c0 + 25Id1 and 29Id1' <= -2 - c0 + 29Id1 + 30Id2 and 29Id1' <= -3 + c0 + 29Id1 and Id2' >= -1 + Id2 and 15Id2' <= -15 + 29Id1 + 15Id2 - 29Id1' and 15Id2' < c0 - 13Id1 and -53 + c0 - Id1 - 25Id1' <= 30Id2' <= -2 + n; S_1[Id1, Id2] -> S_1[Id1', Id2'] : 30Id2 < n and -1 + Id1 <= Id1' < -25Id1 and Id1' <= -2 + 2c0 - 25Id1 - 30Id2 and 4Id1' <= 23 - c0 + 30Id1 + 30Id2 and 25Id1' >= -22 + c0 - n - Id1 and 25Id1' >= -22 - c0 + 25Id1 and 29Id1' <= -2 - c0 + 29Id1 + 30Id2 and 29Id1' <= -3 + c0 + 29Id1 and Id2' >= -1 + Id2 and 15Id2' <= -15 + 29Id1 + 15Id2 - 29Id1' and 15Id2' < c0 - 13Id1 and -53 + c0 - Id1 - 25Id1' <= 30Id2' <= -2 + n }

#create tile relations end

#create stencil schedule start

#tile relatiions delta: { [Id1, Id2] : Id1 >= -1 and Id2 >= -1 and 15Id2 <= -15 - 29Id1 }

#tile relatiions distance vectors set: { [Id1 = -1, Id2 = 0]; [Id1 = 0, Id2 = -1]; [Id1 = -1, Id2 = -1] }

#tile relatiions distance vectors to scan: { [Id1 = -1, Id2 = 0]; [Id1 = 0, Id2 = -1]; [Id1 = -1, Id2 = -1] }

#wafefront hyperplane: lexmin( {[d0 = 0, b0, c0, a1, a2] : exists c1, c2 : ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and c0 = c1 + c2 and a1 != 0 and a2 != 0} * {[d0, b0, c0, a1, a2] : exists b1, b2 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and b0 > 0 and b0 = b1 + b2 and -1*a1 + 0*a2 > 0 and -1*a1 + -1*a2 > 0 and 0*a1 + -1*a2 > 0 } )

#result: { [d0 = 0, b0 = 2, c0 = 0, a1 = -1, a2 = -1] }

#stencil schedule map: [c0, n] -> { S_1[i0, i1, i2] -> [Wid1, Id1, Id2, i0, i1, 1] : Wid1 = -1 * Id1 + -1 * Id2 + 0 and  -25 - 26Id1 <= i0 <= -26Id1 and 30Id2 <= i1 <= 29 + 30Id2  ; S_0[i0, i1, i2] -> [Wid1, Id1, Id2, i0, i1, 0]  : Wid1 = -1 * Id1 + -1 * Id2 + 0 and  -25 - 26Id1 <= i0 <= -26Id1 and 30Id2 <= i1 <= 29 + 30Id2  } 
 
#create stencil schedule end

#create stencil schedule code start

#stencilScheduleMap: [c0, n] -> { S_1[i0, i1, i2] -> [Wid1, Id1, Id2 = -Wid1 - Id1, i0, i1, 1] : -25 - i0 <= 26Id1 <= -i0 and -i1 - 30Wid1 <= 30Id1 <= 29 - i1 - 30Wid1; S_0[i0, i1, i2] -> [Wid1, Id1, Id2 = -Wid1 - Id1, i0, i1, 0] : -25 - i0 <= 26Id1 <= -i0 and -i1 - 30Wid1 <= 30Id1 <= 29 - i1 - 30Wid1 }

#domain_union_set: [c0, n] -> { S_0[i0, i1, i2 = 0] : i0 >= 0 and c0 + i0 <= i1 < n and i1 <= -2 + 2c0 + i0; S_1[i0, i1, i2 = 1] : i0 >= 0 and c0 + i0 <= i1 < n and i1 < 2c0 + i0 }

#stencilGlobalSchedule: [c0, n] -> { S_0[i0, i1, i2 = 0] -> [Wid1, Id1, Id2 = -Wid1 - Id1, i0, i1, 0] : i0 >= 0 and c0 + i0 <= i1 < n and i1 <= -2 + 2c0 + i0 and -25 - i0 <= 26Id1 <= -i0 and -i1 - 30Wid1 <= 30Id1 <= 29 - i1 - 30Wid1; S_1[i0, i1, i2 = 1] -> [Wid1, Id1, Id2 = -Wid1 - Id1, i0, i1, 1] : i0 >= 0 and c0 + i0 <= i1 < n and i1 < 2c0 + i0 and -25 - i0 <= 26Id1 <= -i0 and -i1 - 30Wid1 <= 30Id1 <= 29 - i1 - 30Wid1 }

#mapper_union_map: [c0, n] -> { S_0[c1, c2] -> S_0[i0 = c1, i1 = c2, i2 = 0]; S_1[c1, c2] -> S_1[i0 = c1, i1 = c2, i2 = 1] }

#stencilGlobalSchedule: [c0, n] -> { S_0[c1, c2] -> [Wid1, Id1, Id2 = -Wid1 - Id1, c1, c2, 0] : c1 >= 0 and c0 + c1 <= c2 < n and c2 <= -2 + 2c0 + c1 and -25 - c1 <= 26Id1 <= -c1 and -c2 - 30Wid1 <= 30Id1 <= 29 - c2 - 30Wid1; S_1[c1, c2] -> [Wid1, Id1, Id2 = -Wid1 - Id1, c1, c2, 1] : c1 >= 0 and c0 + c1 <= c2 < n and c2 < 2c0 + c1 and -25 - c1 <= 26Id1 <= -c1 and -c2 - 30Wid1 <= 30Id1 <= 29 - c2 - 30Wid1 }

#create stencil schedule code end

#wavefront card calculate start

#card set: [] -> { [Wid1] : exists c0, n, Id2, Id1, i0, i1, i2 : c0 <= 1000 and  n <= 1000 and c0 >= 0 and  n >= 0 and   Wid1 = -1 * Id1 + -1 * Id2 + 0 and   i2 = 1 and i0 >= 0 and -25 - 26Id1 <= i0 <= -26Id1 and i1 >= c0 + i0 and 30Id2 <= i1 <= 29 + 30Id2 and i1 < n and i1 < 2c0 + i0  } 

#result: { [Wid1] : -33 <= Wid1 <= 6 }

#card set: [] -> { [Wid1] : exists c0, n, Id2, Id1, i0, i1, i2 : c0 <= 1000 and  n <= 1000 and c0 >= 0 and  n >= 0 and   Wid1 = -1 * Id1 + -1 * Id2 + 0 and   i2 = 0 and i0 >= 0 and -25 - 26Id1 <= i0 <= -26Id1 and i1 >= c0 + i0 and 30Id2 <= i1 <= 29 + 30Id2 and i1 < n and i1 <= -2 + 2c0 + i0  } 

#result: { [Wid1] : -33 <= Wid1 <= 6 }

#card union set: [c0, n] -> { [Wid1] : exists Id1, Id2, i0, i1, i2 : Wid1 = -1 * Id1 + -1 * Id2 + 0 and   i2 = 1 and i0 >= 0 and -25 - 26Id1 <= i0 <= -26Id1 and i1 >= c0 + i0 and 30Id2 <= i1 <= 29 + 30Id2 and i1 < n and i1 < 2c0 + i0  } 

#result: [c0, n] -> { [Wid1] : exists (e0: c0 > 0 and n > c0 and e0 <= 0 and 2e0 > -c0 - 15Wid1 and 4e0 <= 54 - c0 - 30Wid1 and 26e0 >= -24 + c0 - n and -n - 30Wid1 < 30e0 <= 29 - c0 - 30Wid1) }

#card union set: [c0, n] -> { [Wid1] : exists Id1, Id2, i0, i1, i2 : Wid1 = -1 * Id1 + -1 * Id2 + 0 and   i2 = 0 and i0 >= 0 and -25 - 26Id1 <= i0 <= -26Id1 and i1 >= c0 + i0 and 30Id2 <= i1 <= 29 + 30Id2 and i1 < n and i1 <= -2 + 2c0 + i0  } 

#result: [c0, n] -> { [Wid1] : exists (e0: c0 >= 2 and n > c0 and e0 <= 0 and 2e0 > -c0 - 15Wid1 and 4e0 <= 54 - c0 - 30Wid1 and 26e0 >= -24 + c0 - n and -n - 30Wid1 < 30e0 <= 29 - c0 - 30Wid1) }

#wavefront card set: { [Wid1] : -33 <= Wid1 <= 6 }

#wavefront card union set: [c0, n] -> { [Wid1] : exists (e0: c0 > 0 and n > c0 and e0 <= 0 and 2e0 > -c0 - 15Wid1 and 4e0 <= 54 - c0 - 30Wid1 and 26e0 >= -24 + c0 - n and -n - 30Wid1 < 30e0 <= 29 - c0 - 30Wid1) }

#Wavefront card calculate end

#stencil scop end
